From 11c41e7fc70375424e502d0e1e97211d11cbbb76 Mon Sep 17 00:00:00 2001
From: Naser Mahfouz <naser.mahfouz@pnnl.gov>
Date: Mon, 23 Oct 2023 20:46:35 -0700
Subject: [PATCH 01/11] clean-clear-sky and clean-sky radiation calls

Adds two additional radiation diagnostic calls following the logic of clear-sky calls. These are clean-clear-sky (neither clouds nor aerosols) and clean-sky (no aerosols). The latter in enabled by instantiating a second optics and never endowing it with aerosols, while the former is called before the other optics are endowed with aerosols and clouds.
---
 .../rrtmgp/eamxx_rrtmgp_process_interface.cpp | 67 +++++++++++++++-
 .../rrtmgp/eamxx_rrtmgp_process_interface.hpp | 12 ++-
 .../rrtmgp/scream_rrtmgp_interface.cpp        | 79 ++++++++++++++++++-
 .../rrtmgp/scream_rrtmgp_interface.hpp        |  9 ++-
 .../rrtmgp/tests/generate_baseline.cpp        | 24 ++++++
 .../src/physics/rrtmgp/tests/rrtmgp_tests.cpp | 24 ++++++
 6 files changed, 207 insertions(+), 8 deletions(-)

diff --git a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
index aa3a8bbf0fd..1e896053757 100644
--- a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
@@ -127,11 +127,21 @@ void RRTMGPRadiation::set_grids(const std::shared_ptr<const GridsManager> grids_
   add_field<Computed>("SW_flux_dn_dir", scalar3d_layout_int, Wm2, grid_name, ps);
   add_field<Computed>("LW_flux_up", scalar3d_layout_int, Wm2, grid_name, "RESTART", ps);
   add_field<Computed>("LW_flux_dn", scalar3d_layout_int, Wm2, grid_name, "RESTART", ps);
+  add_field<Computed>("SW_clnclrsky_flux_dn", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("SW_clnclrsky_flux_up", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("SW_clnclrsky_flux_dn_dir", scalar3d_layout_int, Wm2, grid_name, ps);
   add_field<Computed>("SW_clrsky_flux_dn", scalar3d_layout_int, Wm2, grid_name, ps);
   add_field<Computed>("SW_clrsky_flux_up", scalar3d_layout_int, Wm2, grid_name, ps);
   add_field<Computed>("SW_clrsky_flux_dn_dir", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("SW_clnsky_flux_dn", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("SW_clnsky_flux_up", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("SW_clnsky_flux_dn_dir", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("LW_clnclrsky_flux_up", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("LW_clnclrsky_flux_dn", scalar3d_layout_int, Wm2, grid_name, ps);
   add_field<Computed>("LW_clrsky_flux_up", scalar3d_layout_int, Wm2, grid_name, ps);
   add_field<Computed>("LW_clrsky_flux_dn", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("LW_clnsky_flux_up", scalar3d_layout_int, Wm2, grid_name, ps);
+  add_field<Computed>("LW_clnsky_flux_dn", scalar3d_layout_int, Wm2, grid_name, ps);
   add_field<Computed>("rad_heating_pdel", scalar3d_layout_mid, Pa*K/s, grid_name, "RESTART", ps);
   // Cloud properties added as computed fields for diagnostic purposes
   add_field<Computed>("cldlow"        , scalar2d_layout, nondim, grid_name, "RESTART");
@@ -276,16 +286,36 @@ void RRTMGPRadiation::init_buffers(const ATMBufferManager &buffer_manager)
   mem += m_buffer.lw_flux_up.totElems();
   m_buffer.lw_flux_dn = decltype(m_buffer.lw_flux_dn)("lw_flux_dn", mem, m_col_chunk_size, m_nlay+1);
   mem += m_buffer.lw_flux_dn.totElems();
+  m_buffer.sw_clnclrsky_flux_up = decltype(m_buffer.sw_clnclrsky_flux_up)("sw_clnclrsky_flux_up", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.sw_clnclrsky_flux_up.totElems();
+  m_buffer.sw_clnclrsky_flux_dn = decltype(m_buffer.sw_clnclrsky_flux_dn)("sw_clnclrsky_flux_dn", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.sw_clnclrsky_flux_dn.totElems();
+  m_buffer.sw_clnclrsky_flux_dn_dir = decltype(m_buffer.sw_clnclrsky_flux_dn_dir)("sw_clnclrsky_flux_dn_dir", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.sw_clnclrsky_flux_dn_dir.totElems();
   m_buffer.sw_clrsky_flux_up = decltype(m_buffer.sw_clrsky_flux_up)("sw_clrsky_flux_up", mem, m_col_chunk_size, m_nlay+1);
   mem += m_buffer.sw_clrsky_flux_up.totElems();
   m_buffer.sw_clrsky_flux_dn = decltype(m_buffer.sw_clrsky_flux_dn)("sw_clrsky_flux_dn", mem, m_col_chunk_size, m_nlay+1);
   mem += m_buffer.sw_clrsky_flux_dn.totElems();
   m_buffer.sw_clrsky_flux_dn_dir = decltype(m_buffer.sw_clrsky_flux_dn_dir)("sw_clrsky_flux_dn_dir", mem, m_col_chunk_size, m_nlay+1);
   mem += m_buffer.sw_clrsky_flux_dn_dir.totElems();
+  m_buffer.sw_clnsky_flux_up = decltype(m_buffer.sw_clnsky_flux_up)("sw_clnsky_flux_up", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.sw_clnsky_flux_up.totElems();
+  m_buffer.sw_clnsky_flux_dn = decltype(m_buffer.sw_clnsky_flux_dn)("sw_clnsky_flux_dn", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.sw_clnsky_flux_dn.totElems();
+  m_buffer.sw_clnsky_flux_dn_dir = decltype(m_buffer.sw_clnsky_flux_dn_dir)("sw_clnsky_flux_dn_dir", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.sw_clnsky_flux_dn_dir.totElems();
+  m_buffer.lw_clnclrsky_flux_up = decltype(m_buffer.lw_clnclrsky_flux_up)("lw_clnclrsky_flux_up", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.lw_clnclrsky_flux_up.totElems();
+  m_buffer.lw_clnclrsky_flux_dn = decltype(m_buffer.lw_clnclrsky_flux_dn)("lw_clnclrsky_flux_dn", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.lw_clnclrsky_flux_dn.totElems();
   m_buffer.lw_clrsky_flux_up = decltype(m_buffer.lw_clrsky_flux_up)("lw_clrsky_flux_up", mem, m_col_chunk_size, m_nlay+1);
   mem += m_buffer.lw_clrsky_flux_up.totElems();
   m_buffer.lw_clrsky_flux_dn = decltype(m_buffer.lw_clrsky_flux_dn)("lw_clrsky_flux_dn", mem, m_col_chunk_size, m_nlay+1);
   mem += m_buffer.lw_clrsky_flux_dn.totElems();
+  m_buffer.lw_clnsky_flux_up = decltype(m_buffer.lw_clnsky_flux_up)("lw_clnsky_flux_up", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.lw_clnsky_flux_up.totElems();
+  m_buffer.lw_clnsky_flux_dn = decltype(m_buffer.lw_clnsky_flux_dn)("lw_clnsky_flux_dn", mem, m_col_chunk_size, m_nlay+1);
+  mem += m_buffer.lw_clnsky_flux_dn.totElems();
   // 3d arrays with nswbands dimension (shortwave fluxes by band)
   m_buffer.sw_bnd_flux_up = decltype(m_buffer.sw_bnd_flux_up)("sw_bnd_flux_up", mem, m_col_chunk_size, m_nlay+1, m_nswbands);
   mem += m_buffer.sw_bnd_flux_up.totElems();
@@ -440,11 +470,21 @@ void RRTMGPRadiation::run_impl (const double dt) {
   auto d_sw_flux_dn_dir = get_field_out("SW_flux_dn_dir").get_view<Real**>();
   auto d_lw_flux_up = get_field_out("LW_flux_up").get_view<Real**>();
   auto d_lw_flux_dn = get_field_out("LW_flux_dn").get_view<Real**>();
+  auto d_sw_clnclrsky_flux_up = get_field_out("SW_clnclrsky_flux_up").get_view<Real**>();
+  auto d_sw_clnclrsky_flux_dn = get_field_out("SW_clnclrsky_flux_dn").get_view<Real**>();
+  auto d_sw_clnclrsky_flux_dn_dir = get_field_out("SW_clnclrsky_flux_dn_dir").get_view<Real**>();
   auto d_sw_clrsky_flux_up = get_field_out("SW_clrsky_flux_up").get_view<Real**>();
   auto d_sw_clrsky_flux_dn = get_field_out("SW_clrsky_flux_dn").get_view<Real**>();
   auto d_sw_clrsky_flux_dn_dir = get_field_out("SW_clrsky_flux_dn_dir").get_view<Real**>();
+  auto d_sw_clnsky_flux_up = get_field_out("SW_clnsky_flux_up").get_view<Real**>();
+  auto d_sw_clnsky_flux_dn = get_field_out("SW_clnsky_flux_dn").get_view<Real**>();
+  auto d_sw_clnsky_flux_dn_dir = get_field_out("SW_clnsky_flux_dn_dir").get_view<Real**>();
+  auto d_lw_clnclrsky_flux_up = get_field_out("LW_clnclrsky_flux_up").get_view<Real**>();
+  auto d_lw_clnclrsky_flux_dn = get_field_out("LW_clnclrsky_flux_dn").get_view<Real**>();
   auto d_lw_clrsky_flux_up = get_field_out("LW_clrsky_flux_up").get_view<Real**>();
   auto d_lw_clrsky_flux_dn = get_field_out("LW_clrsky_flux_dn").get_view<Real**>();
+  auto d_lw_clnsky_flux_up = get_field_out("LW_clnsky_flux_up").get_view<Real**>();
+  auto d_lw_clnsky_flux_dn = get_field_out("LW_clnsky_flux_dn").get_view<Real**>();
   auto d_rad_heating_pdel = get_field_out("rad_heating_pdel").get_view<Real**>();
   auto d_sfc_flux_dir_vis = get_field_out("sfc_flux_dir_vis").get_view<Real*>();
   auto d_sfc_flux_dir_nir = get_field_out("sfc_flux_dir_nir").get_view<Real*>();
@@ -564,11 +604,21 @@ void RRTMGPRadiation::run_impl (const double dt) {
       auto sw_flux_dn_dir  = subview_2d(m_buffer.sw_flux_dn_dir);
       auto lw_flux_up      = subview_2d(m_buffer.lw_flux_up);
       auto lw_flux_dn      = subview_2d(m_buffer.lw_flux_dn);
+      auto sw_clnclrsky_flux_up      = subview_2d(m_buffer.sw_clnclrsky_flux_up);
+      auto sw_clnclrsky_flux_dn      = subview_2d(m_buffer.sw_clnclrsky_flux_dn);
+      auto sw_clnclrsky_flux_dn_dir  = subview_2d(m_buffer.sw_clnclrsky_flux_dn_dir);
       auto sw_clrsky_flux_up      = subview_2d(m_buffer.sw_clrsky_flux_up);
       auto sw_clrsky_flux_dn      = subview_2d(m_buffer.sw_clrsky_flux_dn);
       auto sw_clrsky_flux_dn_dir  = subview_2d(m_buffer.sw_clrsky_flux_dn_dir);
+      auto sw_clnsky_flux_up      = subview_2d(m_buffer.sw_clnsky_flux_up);
+      auto sw_clnsky_flux_dn      = subview_2d(m_buffer.sw_clnsky_flux_dn);
+      auto sw_clnsky_flux_dn_dir  = subview_2d(m_buffer.sw_clnsky_flux_dn_dir);
+      auto lw_clnclrsky_flux_up      = subview_2d(m_buffer.lw_clnclrsky_flux_up);
+      auto lw_clnclrsky_flux_dn      = subview_2d(m_buffer.lw_clnclrsky_flux_dn);
       auto lw_clrsky_flux_up      = subview_2d(m_buffer.lw_clrsky_flux_up);
       auto lw_clrsky_flux_dn      = subview_2d(m_buffer.lw_clrsky_flux_dn);
+      auto lw_clnsky_flux_up      = subview_2d(m_buffer.lw_clnsky_flux_up);
+      auto lw_clnsky_flux_dn      = subview_2d(m_buffer.lw_clnsky_flux_dn);
       auto sw_bnd_flux_up  = subview_3d(m_buffer.sw_bnd_flux_up);
       auto sw_bnd_flux_dn  = subview_3d(m_buffer.sw_bnd_flux_dn);
       auto sw_bnd_flux_dir = subview_3d(m_buffer.sw_bnd_flux_dir);
@@ -847,7 +897,12 @@ void RRTMGPRadiation::run_impl (const double dt) {
         cld_tau_sw_bnd, cld_tau_lw_bnd,
         cld_tau_sw_gpt, cld_tau_lw_gpt,
         sw_flux_up       , sw_flux_dn       , sw_flux_dn_dir       , lw_flux_up       , lw_flux_dn,
-        sw_clrsky_flux_up, sw_clrsky_flux_dn, sw_clrsky_flux_dn_dir, lw_clrsky_flux_up, lw_clrsky_flux_dn,
+        sw_clnclrsky_flux_up, sw_clnclrsky_flux_dn, sw_clnclrsky_flux_dn_dir,
+        sw_clrsky_flux_up, sw_clrsky_flux_dn, sw_clrsky_flux_dn_dir,
+        sw_clnsky_flux_up, sw_clnsky_flux_dn, sw_clnsky_flux_dn_dir,
+        lw_clnclrsky_flux_up, lw_clnclrsky_flux_dn,
+        lw_clrsky_flux_up, lw_clrsky_flux_dn,
+        lw_clnsky_flux_up, lw_clnsky_flux_dn,
         sw_bnd_flux_up   , sw_bnd_flux_dn   , sw_bnd_flux_dir      , lw_bnd_flux_up   , lw_bnd_flux_dn,
         eccf, m_atm_logger
       );
@@ -949,11 +1004,21 @@ void RRTMGPRadiation::run_impl (const double dt) {
           d_sw_flux_dn_dir(icol,k)        = sw_flux_dn_dir(i+1,k+1);
           d_lw_flux_up(icol,k)            = lw_flux_up(i+1,k+1);
           d_lw_flux_dn(icol,k)            = lw_flux_dn(i+1,k+1);
+          d_sw_clnclrsky_flux_up(icol,k)     = sw_clnclrsky_flux_up(i+1,k+1);
+          d_sw_clnclrsky_flux_dn(icol,k)     = sw_clnclrsky_flux_dn(i+1,k+1);
+          d_sw_clnclrsky_flux_dn_dir(icol,k) = sw_clnclrsky_flux_dn_dir(i+1,k+1);
           d_sw_clrsky_flux_up(icol,k)     = sw_clrsky_flux_up(i+1,k+1);
           d_sw_clrsky_flux_dn(icol,k)     = sw_clrsky_flux_dn(i+1,k+1);
           d_sw_clrsky_flux_dn_dir(icol,k) = sw_clrsky_flux_dn_dir(i+1,k+1);
+          d_sw_clnsky_flux_up(icol,k)     = sw_clnsky_flux_up(i+1,k+1);
+          d_sw_clnsky_flux_dn(icol,k)     = sw_clnsky_flux_dn(i+1,k+1);
+          d_sw_clnsky_flux_dn_dir(icol,k) = sw_clnsky_flux_dn_dir(i+1,k+1);
+          d_lw_clnclrsky_flux_up(icol,k)     = lw_clnclrsky_flux_up(i+1,k+1);
+          d_lw_clnclrsky_flux_dn(icol,k)     = lw_clnclrsky_flux_dn(i+1,k+1);
           d_lw_clrsky_flux_up(icol,k)     = lw_clrsky_flux_up(i+1,k+1);
           d_lw_clrsky_flux_dn(icol,k)     = lw_clrsky_flux_dn(i+1,k+1);
+          d_lw_clnsky_flux_up(icol,k)     = lw_clnsky_flux_up(i+1,k+1);
+          d_lw_clnsky_flux_dn(icol,k)     = lw_clnsky_flux_dn(i+1,k+1);
         });
         // Extract optical properties for COSP
         Kokkos::parallel_for(Kokkos::TeamVectorRange(team, nlay), [&] (const int& k) {
diff --git a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.hpp b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.hpp
index 0b900028ffd..4562fd59117 100644
--- a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.hpp
+++ b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.hpp
@@ -107,7 +107,7 @@ class RRTMGPRadiation : public AtmosphereProcess {
   struct Buffer {
     static constexpr int num_1d_ncol        = 10;
     static constexpr int num_2d_nlay        = 16;
-    static constexpr int num_2d_nlay_p1     = 13;
+    static constexpr int num_2d_nlay_p1     = 23;
     static constexpr int num_2d_nswbands    = 2;
     static constexpr int num_3d_nlev_nswbands = 4;
     static constexpr int num_3d_nlev_nlwbands = 2;
@@ -154,11 +154,21 @@ class RRTMGPRadiation : public AtmosphereProcess {
     real2d sw_flux_dn_dir;
     real2d lw_flux_up;
     real2d lw_flux_dn;
+    real2d sw_clnclrsky_flux_up;
+    real2d sw_clnclrsky_flux_dn;
+    real2d sw_clnclrsky_flux_dn_dir;
     real2d sw_clrsky_flux_up;
     real2d sw_clrsky_flux_dn;
     real2d sw_clrsky_flux_dn_dir;
+    real2d sw_clnsky_flux_up;
+    real2d sw_clnsky_flux_dn;
+    real2d sw_clnsky_flux_dn_dir;
+    real2d lw_clnclrsky_flux_up;
+    real2d lw_clnclrsky_flux_dn;
     real2d lw_clrsky_flux_up;
     real2d lw_clrsky_flux_dn;
+    real2d lw_clnsky_flux_up;
+    real2d lw_clnsky_flux_dn;
     uview_2d<Real> d_tint;
 
     // 3d size (ncol, nlay+1, nswbands)
diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
index e5b27131f2e..9c5e8185e72 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
@@ -222,8 +222,12 @@ namespace scream {
                 real3d &cld_tau_lw_gpt,
                 real2d &sw_flux_up, real2d &sw_flux_dn, real2d &sw_flux_dn_dir,
                 real2d &lw_flux_up, real2d &lw_flux_dn,
+                real2d &sw_clnclrsky_flux_up, real2d &sw_clnclrsky_flux_dn, real2d &sw_clnclrsky_flux_dn_dir,
                 real2d &sw_clrsky_flux_up, real2d &sw_clrsky_flux_dn, real2d &sw_clrsky_flux_dn_dir,
+                real2d &sw_clnsky_flux_up, real2d &sw_clnsky_flux_dn, real2d &sw_clnsky_flux_dn_dir,
+                real2d &lw_clnclrsky_flux_up, real2d &lw_clnclrsky_flux_dn,
                 real2d &lw_clrsky_flux_up, real2d &lw_clrsky_flux_dn,
+                real2d &lw_clnsky_flux_up, real2d &lw_clnsky_flux_dn,
                 real3d &sw_bnd_flux_up, real3d &sw_bnd_flux_dn, real3d &sw_bnd_flux_dn_dir,
                 real3d &lw_bnd_flux_up, real3d &lw_bnd_flux_dn,
                 const Real tsi_scaling,
@@ -252,11 +256,21 @@ namespace scream {
             fluxes_sw.bnd_flux_up = sw_bnd_flux_up;
             fluxes_sw.bnd_flux_dn = sw_bnd_flux_dn;
             fluxes_sw.bnd_flux_dn_dir = sw_bnd_flux_dn_dir;
+            // Clean-clear-sky
+            FluxesBroadband clnclrsky_fluxes_sw;
+            clnclrsky_fluxes_sw.flux_up = sw_clnclrsky_flux_up;
+            clnclrsky_fluxes_sw.flux_dn = sw_clnclrsky_flux_dn;
+            clnclrsky_fluxes_sw.flux_dn_dir = sw_clnclrsky_flux_dn_dir;
             // Clear-sky
             FluxesBroadband clrsky_fluxes_sw;
             clrsky_fluxes_sw.flux_up = sw_clrsky_flux_up;
             clrsky_fluxes_sw.flux_dn = sw_clrsky_flux_dn;
             clrsky_fluxes_sw.flux_dn_dir = sw_clrsky_flux_dn_dir;
+            // Clean-sky
+            FluxesBroadband clnsky_fluxes_sw;
+            clnsky_fluxes_sw.flux_up = sw_clnsky_flux_up;
+            clnsky_fluxes_sw.flux_dn = sw_clnsky_flux_dn;
+            clnsky_fluxes_sw.flux_dn_dir = sw_clnsky_flux_dn_dir;
 
             // Setup pointers to RRTMGP LW fluxes
             FluxesByband fluxes_lw;
@@ -264,10 +278,18 @@ namespace scream {
             fluxes_lw.flux_dn = lw_flux_dn;
             fluxes_lw.bnd_flux_up = lw_bnd_flux_up;
             fluxes_lw.bnd_flux_dn = lw_bnd_flux_dn;
+            // Clean-clear-sky
+            FluxesBroadband clnclrsky_fluxes_lw;
+            clnclrsky_fluxes_lw.flux_up = lw_clnclrsky_flux_up;
+            clnclrsky_fluxes_lw.flux_dn = lw_clnclrsky_flux_dn;
             // Clear-sky
             FluxesBroadband clrsky_fluxes_lw;
             clrsky_fluxes_lw.flux_up = lw_clrsky_flux_up;
             clrsky_fluxes_lw.flux_dn = lw_clrsky_flux_dn;
+            // Clean-sky
+            FluxesBroadband clnsky_fluxes_lw;
+            clnsky_fluxes_lw.flux_up = lw_clnsky_flux_up;
+            clnsky_fluxes_lw.flux_dn = lw_clnsky_flux_dn;
 
             auto nswbands = k_dist_sw.get_nband();
             auto nlwbands = k_dist_lw.get_nband();
@@ -340,7 +362,7 @@ namespace scream {
                 ncol, nlay,
                 k_dist_sw, p_lay, t_lay, p_lev, t_lev, gas_concs, 
                 sfc_alb_dir, sfc_alb_dif, mu0, aerosol_sw, clouds_sw_gpt,
-                fluxes_sw, clrsky_fluxes_sw,
+                fluxes_sw, clnclrsky_fluxes_sw, clrsky_fluxes_sw, clnsky_fluxes_sw,
                 tsi_scaling, logger
             );
 
@@ -349,7 +371,7 @@ namespace scream {
                 ncol, nlay,
                 k_dist_lw, p_lay, t_lay, p_lev, t_lev, gas_concs,
                 aerosol_lw, clouds_lw_gpt,
-                fluxes_lw, clrsky_fluxes_lw
+                fluxes_lw, clnclrsky_fluxes_lw, clrsky_fluxes_lw, clnsky_fluxes_lw
             );
             
         }
@@ -578,7 +600,7 @@ namespace scream {
                 GasConcs &gas_concs,
                 real2d &sfc_alb_dir, real2d &sfc_alb_dif, real1d &mu0, 
                 OpticalProps2str &aerosol, OpticalProps2str &clouds,
-                FluxesByband &fluxes, FluxesBroadband &clrsky_fluxes,
+                FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes,
                 const Real tsi_scaling,
                 const std::shared_ptr<spdlog::logger>& logger) {
 
@@ -594,18 +616,30 @@ namespace scream {
             auto &bnd_flux_up = fluxes.bnd_flux_up;
             auto &bnd_flux_dn = fluxes.bnd_flux_dn;
             auto &bnd_flux_dn_dir = fluxes.bnd_flux_dn_dir;
+            auto &clnclrsky_flux_up = clnclrsky_fluxes.flux_up;
+            auto &clnclrsky_flux_dn = clnclrsky_fluxes.flux_dn;
+            auto &clnclrsky_flux_dn_dir = clnclrsky_fluxes.flux_dn_dir;
             auto &clrsky_flux_up = clrsky_fluxes.flux_up;
             auto &clrsky_flux_dn = clrsky_fluxes.flux_dn;
             auto &clrsky_flux_dn_dir = clrsky_fluxes.flux_dn_dir;
+            auto &clnsky_flux_up = clnsky_fluxes.flux_up;
+            auto &clnsky_flux_dn = clnsky_fluxes.flux_dn;
+            auto &clnsky_flux_dn_dir = clnsky_fluxes.flux_dn_dir;
 
             // Reset fluxes to zero
             parallel_for(SimpleBounds<2>(nlay+1,ncol), YAKL_LAMBDA(int ilev, int icol) {
                 flux_up    (icol,ilev) = 0;
                 flux_dn    (icol,ilev) = 0;
                 flux_dn_dir(icol,ilev) = 0;
+                clnclrsky_flux_up    (icol,ilev) = 0;
+                clnclrsky_flux_dn    (icol,ilev) = 0;
+                clnclrsky_flux_dn_dir(icol,ilev) = 0;
                 clrsky_flux_up    (icol,ilev) = 0;
                 clrsky_flux_dn    (icol,ilev) = 0;
                 clrsky_flux_dn_dir(icol,ilev) = 0;
+                clnsky_flux_up    (icol,ilev) = 0;
+                clnsky_flux_dn    (icol,ilev) = 0;
+                clnsky_flux_dn_dir(icol,ilev) = 0;
             });
             parallel_for(SimpleBounds<3>(nbnd,nlay+1,ncol), YAKL_LAMBDA(int ibnd, int ilev, int icol) {
                 bnd_flux_up    (icol,ilev,ibnd) = 0;
@@ -718,6 +752,10 @@ namespace scream {
             OpticalProps2str optics;
             optics.alloc_2str(nday, nlay, k_dist);
 
+            // Allocate space for optical properties (no aerosols)
+            OpticalProps2str optics_no_aerosols;
+            optics_no_aerosols.alloc_2str(nday, nlay, k_dist);
+
             // Limit temperatures for gas optics look-up tables
             auto t_lay_limited = real2d("t_lay_limited", nday, nlay);
             limit_to_bounds(t_lay_day, k_dist_sw.get_temp_min(), k_dist_sw.get_temp_max(), t_lay_limited);
@@ -728,6 +766,8 @@ namespace scream {
             bool top_at_1 = p_lay_host(1, 1) < p_lay_host(1, nlay);
 
             k_dist.gas_optics(nday, nlay, top_at_1, p_lay_day, p_lev_day, t_lay_limited, gas_concs_day, optics, toa_flux);
+            k_dist.gas_optics(nday, nlay, top_at_1, p_lay_day, p_lev_day, t_lay_limited, gas_concs_day, optics_no_aerosols, toa_flux);
+
 
 #ifdef SCREAM_RRTMGP_DEBUG
             // Check gas optics
@@ -741,6 +781,16 @@ namespace scream {
                 toa_flux(iday,igpt) = tsi_scaling * toa_flux(iday,igpt);
             });
 
+            // Compute clear-clean-sky (just gas) fluxes on daytime columns
+            rte_sw(optics, top_at_1, mu0_day, toa_flux, sfc_alb_dir_T, sfc_alb_dif_T, fluxes_day);
+            // Expand daytime fluxes to all columns
+            parallel_for(SimpleBounds<2>(nlay+1,nday), YAKL_LAMBDA(int ilev, int iday) {
+                int icol = dayIndices(iday);
+                clnclrsky_flux_up    (icol,ilev) = flux_up_day    (iday,ilev);
+                clnclrsky_flux_dn    (icol,ilev) = flux_dn_day    (iday,ilev);
+                clnclrsky_flux_dn_dir(icol,ilev) = flux_dn_dir_day(iday,ilev);
+            });
+
             // Combine gas and aerosol optics
             aerosol_day.delta_scale();
             aerosol_day.increment(optics);
@@ -760,6 +810,7 @@ namespace scream {
             // Combine gas and cloud optics
             clouds_day.delta_scale();
             clouds_day.increment(optics);
+            clouds_day.increment(optics_no_aerosols);
             // Compute fluxes on daytime columns
             rte_sw(optics, top_at_1, mu0_day, toa_flux, sfc_alb_dir_T, sfc_alb_dif_T, fluxes_day);
             // Expand daytime fluxes to all columns
@@ -775,6 +826,15 @@ namespace scream {
                 bnd_flux_dn    (icol,ilev,ibnd) = bnd_flux_dn_day    (iday,ilev,ibnd);
                 bnd_flux_dn_dir(icol,ilev,ibnd) = bnd_flux_dn_dir_day(iday,ilev,ibnd);
             });
+            // Compute cleansky (gas + clouds) fluxes on daytime columns
+            rte_sw(optics_no_aerosols, top_at_1, mu0_day, toa_flux, sfc_alb_dir_T, sfc_alb_dif_T, fluxes_day);
+            // Expand daytime fluxes to all columns
+            parallel_for(SimpleBounds<2>(nlay+1,nday), YAKL_LAMBDA(int ilev, int iday) {
+                int icol = dayIndices(iday);
+                clnsky_flux_up    (icol,ilev) = flux_up_day    (iday,ilev);
+                clnsky_flux_dn    (icol,ilev) = flux_dn_day    (iday,ilev);
+                clnsky_flux_dn_dir(icol,ilev) = flux_dn_dir_day(iday,ilev);
+            });
         }
 
         void rrtmgp_lw(
@@ -784,7 +844,7 @@ namespace scream {
                 GasConcs &gas_concs,
                 OpticalProps1scl &aerosol,
                 OpticalProps1scl &clouds,
-                FluxesByband &fluxes, FluxesBroadband &clrsky_fluxes) {
+                FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes) {
 
             // Problem size
             int nbnd = k_dist.get_nband();
@@ -792,6 +852,9 @@ namespace scream {
             // Allocate space for optical properties
             OpticalProps1scl optics;
             optics.alloc_1scl(ncol, nlay, k_dist);
+            // Allocate space for optical properties (no aerosols)
+            OpticalProps1scl optics_no_aerosols;
+            optics_no_aerosols.alloc_1scl(ncol, nlay, k_dist);
 
             // Boundary conditions
             SourceFuncLW lw_sources;
@@ -838,12 +901,16 @@ namespace scream {
 
             // Do gas optics
             k_dist.gas_optics(ncol, nlay, top_at_1, p_lay, p_lev, t_lay_limited, t_sfc, gas_concs, optics, lw_sources, real2d(), t_lev_limited);
+            k_dist.gas_optics(ncol, nlay, top_at_1, p_lay, p_lev, t_lay_limited, t_sfc, gas_concs, optics_no_aerosols, lw_sources, real2d(), t_lev_limited);
 
 #ifdef SCREAM_RRTMGP_DEBUG
             // Check gas optics
             check_range(optics.tau,  0, std::numeric_limits<Real>::max(), "rrtmgp_lw:optics.tau");
 #endif
 
+            // Compute clean-sky fluxes before we add in aerosols
+            rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, clnsky_fluxes);
+
             // Combine gas and aerosol optics
             aerosol.increment(optics);
 
@@ -852,10 +919,14 @@ namespace scream {
 
             // Combine gas and cloud optics
             clouds.increment(optics);
+            clouds.increment(optics_no_aerosols);
 
             // Compute allsky fluxes
             rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, fluxes);
 
+            // Compute clean-clear-sky fluxes
+            rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics_no_aerosols, top_at_1, lw_sources, emis_sfc, clnclrsky_fluxes);
+
         }
 
         void compute_cloud_area(
diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
index ab4b3326f64..dabdc6d0107 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
@@ -72,8 +72,12 @@ namespace scream {
                 real3d &cld_tau_sw_gpt, real3d &cld_tau_lw_gpt,
                 real2d &sw_flux_up, real2d &sw_flux_dn, real2d &sw_flux_dn_dir,
                 real2d &lw_flux_up, real2d &lw_flux_dn,
+                real2d &sw_clnclrsky_flux_up, real2d &sw_clnclrsky_flux_dn, real2d &sw_clnclrsky_flux_dn_dir,
                 real2d &sw_clrsky_flux_up, real2d &sw_clrsky_flux_dn, real2d &sw_clrsky_flux_dn_dir,
+                real2d &sw_clnsky_flux_up, real2d &sw_clnsky_flux_dn, real2d &sw_clnsky_flux_dn_dir,
+                real2d &lw_clnclrsky_flux_up, real2d &lw_clnclrsky_flux_dn,
                 real2d &lw_clrsky_flux_up, real2d &lw_clrsky_flux_dn,
+                real2d &lw_clnsky_flux_up, real2d &lw_clnsky_flux_dn,
                 real3d &sw_bnd_flux_up, real3d &sw_bnd_flux_dn, real3d &sw_bnd_flux_dn_dir,
                 real3d &lw_bnd_flux_up, real3d &lw_bnd_flux_dn,
                 const Real tsi_scaling,
@@ -91,7 +95,8 @@ namespace scream {
                 GasConcs &gas_concs,
                 real2d &sfc_alb_dir, real2d &sfc_alb_dif, real1d &mu0,
                 OpticalProps2str &aerosol, OpticalProps2str &clouds,
-                FluxesByband &fluxes, FluxesBroadband &clrsky_fluxes, const Real tsi_scaling,
+                FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes,
+                const Real tsi_scaling,
                 const std::shared_ptr<spdlog::logger>& logger);
         /*
          * Longwave driver (called by rrtmgp_main)
@@ -102,7 +107,7 @@ namespace scream {
                 real2d &p_lay, real2d &t_lay, real2d &p_lev, real2d &t_lev,
                 GasConcs &gas_concs,
                 OpticalProps1scl &aerosol, OpticalProps1scl &clouds,
-                FluxesByband &fluxes, FluxesBroadband &clrsky_fluxes);
+                FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes);
         /*
          * Return a subcolumn mask consistent with a specified overlap assumption
          */
diff --git a/components/eamxx/src/physics/rrtmgp/tests/generate_baseline.cpp b/components/eamxx/src/physics/rrtmgp/tests/generate_baseline.cpp
index 11e711f8d41..4e678c7a825 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/generate_baseline.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/generate_baseline.cpp
@@ -108,11 +108,21 @@ int main (int argc, char** argv) {
     real2d sw_flux_dn_dir("sw_flux_dn_dir", ncol, nlay+1);
     real2d lw_flux_up ("lw_flux_up" , ncol, nlay+1);
     real2d lw_flux_dn ("lw_flux_dn" , ncol, nlay+1);
+    real2d sw_clnclrsky_flux_up ("sw_clnclrsky_flux_up" , ncol, nlay+1);
+    real2d sw_clnclrsky_flux_dn ("sw_clnclrsky_flux_dn" , ncol, nlay+1);
+    real2d sw_clnclrsky_flux_dn_dir("sw_clnclrsky_flux_dn_dir", ncol, nlay+1);
     real2d sw_clrsky_flux_up ("sw_clrsky_flux_up" , ncol, nlay+1);
     real2d sw_clrsky_flux_dn ("sw_clrsky_flux_dn" , ncol, nlay+1);
     real2d sw_clrsky_flux_dn_dir("sw_clrsky_flux_dn_dir", ncol, nlay+1);
+    real2d sw_clnsky_flux_up ("sw_clnsky_flux_up" , ncol, nlay+1);
+    real2d sw_clnsky_flux_dn ("sw_clnsky_flux_dn" , ncol, nlay+1);
+    real2d sw_clnsky_flux_dn_dir("sw_clnsky_flux_dn_dir", ncol, nlay+1);
+    real2d lw_clnclrsky_flux_up ("lw_clnclrsky_flux_up" , ncol, nlay+1);
+    real2d lw_clnclrsky_flux_dn ("lw_clnclrsky_flux_dn" , ncol, nlay+1);
     real2d lw_clrsky_flux_up ("lw_clrsky_flux_up" , ncol, nlay+1);
     real2d lw_clrsky_flux_dn ("lw_clrsky_flux_dn" , ncol, nlay+1);
+    real2d lw_clnsky_flux_up ("lw_clnsky_flux_up" , ncol, nlay+1);
+    real2d lw_clnsky_flux_dn ("lw_clnsky_flux_dn" , ncol, nlay+1);
     real3d sw_bnd_flux_up ("sw_bnd_flux_up" , ncol, nlay+1, nswbands);
     real3d sw_bnd_flux_dn ("sw_bnd_flux_dn" , ncol, nlay+1, nswbands);
     real3d sw_bnd_flux_dir("sw_bnd_flux_dir", ncol, nlay+1, nswbands);
@@ -166,8 +176,12 @@ int main (int argc, char** argv) {
         cld_tau_sw, cld_tau_lw,  // outputs
         sw_flux_up, sw_flux_dn, sw_flux_dn_dir,
         lw_flux_up, lw_flux_dn,
+        sw_clnclrsky_flux_up, sw_clnclrsky_flux_dn, sw_clnclrsky_flux_dn_dir,
         sw_clrsky_flux_up, sw_clrsky_flux_dn, sw_clrsky_flux_dn_dir,
+        sw_clnsky_flux_up, sw_clnsky_flux_dn, sw_clnsky_flux_dn_dir,
+        lw_clnclrsky_flux_up, lw_clnclrsky_flux_dn,
         lw_clrsky_flux_up, lw_clrsky_flux_dn,
+        lw_clnsky_flux_up, lw_clnsky_flux_dn,
         sw_bnd_flux_up, sw_bnd_flux_dn, sw_bnd_flux_dir,
         lw_bnd_flux_up, lw_bnd_flux_dn, tsi_scaling,
         logger
@@ -219,11 +233,21 @@ int main (int argc, char** argv) {
     sw_flux_dn_dir.deallocate();
     lw_flux_up.deallocate();
     lw_flux_dn.deallocate();
+    sw_clnclrsky_flux_up.deallocate();
+    sw_clnclrsky_flux_dn.deallocate();
+    sw_clnclrsky_flux_dn_dir.deallocate();
     sw_clrsky_flux_up.deallocate();
     sw_clrsky_flux_dn.deallocate();
     sw_clrsky_flux_dn_dir.deallocate();
+    sw_clnsky_flux_up.deallocate();
+    sw_clnsky_flux_dn.deallocate();
+    sw_clnsky_flux_dn_dir.deallocate();
+    lw_clnclrsky_flux_up.deallocate();
+    lw_clnclrsky_flux_dn.deallocate();
     lw_clrsky_flux_up.deallocate();
     lw_clrsky_flux_dn.deallocate();
+    lw_clnsky_flux_up.deallocate();
+    lw_clnsky_flux_dn.deallocate();
     sw_bnd_flux_up.deallocate();
     sw_bnd_flux_dn.deallocate();
     sw_bnd_flux_dir.deallocate();
diff --git a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
index 1ed93f854a1..4fc73a46b08 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
@@ -142,11 +142,21 @@ int run(int argc, char** argv) {
     real2d sw_flux_dir("sw_flux_dir", ncol, nlay+1);
     real2d lw_flux_up ("lw_flux_up" , ncol, nlay+1);
     real2d lw_flux_dn ("lw_flux_dn" , ncol, nlay+1);
+    real2d sw_clnclrsky_flux_up ("sw_clnclrsky_flux_up" , ncol, nlay+1);
+    real2d sw_clnclrsky_flux_dn ("sw_clnclrsky_flux_dn" , ncol, nlay+1);
+    real2d sw_clnclrsky_flux_dir("sw_clnclrsky_flux_dir", ncol, nlay+1);
     real2d sw_clrsky_flux_up ("sw_clrsky_flux_up" , ncol, nlay+1);
     real2d sw_clrsky_flux_dn ("sw_clrsky_flux_dn" , ncol, nlay+1);
     real2d sw_clrsky_flux_dir("sw_clrsky_flux_dir", ncol, nlay+1);
+    real2d sw_clnsky_flux_up ("sw_clnsky_flux_up" , ncol, nlay+1);
+    real2d sw_clnsky_flux_dn ("sw_clnsky_flux_dn" , ncol, nlay+1);
+    real2d sw_clnsky_flux_dir("sw_clnsky_flux_dir", ncol, nlay+1);
+    real2d lw_clnclrsky_flux_up ("lw_clnclrsky_flux_up" , ncol, nlay+1);
+    real2d lw_clnclrsky_flux_dn ("lw_clnclrsky_flux_dn" , ncol, nlay+1);
     real2d lw_clrsky_flux_up ("lw_clrsky_flux_up" , ncol, nlay+1);
     real2d lw_clrsky_flux_dn ("lw_clrsky_flux_dn" , ncol, nlay+1);
+    real2d lw_clnsky_flux_up ("lw_clnsky_flux_up" , ncol, nlay+1);
+    real2d lw_clnsky_flux_dn ("lw_clnsky_flux_dn" , ncol, nlay+1);
     real3d sw_bnd_flux_up ("sw_bnd_flux_up" , ncol, nlay+1, nswbands);
     real3d sw_bnd_flux_dn ("sw_bnd_flux_dn" , ncol, nlay+1, nswbands);
     real3d sw_bnd_flux_dir("sw_bnd_flux_dir", ncol, nlay+1, nswbands);
@@ -198,8 +208,12 @@ int run(int argc, char** argv) {
             cld_tau_sw, cld_tau_lw,  // outputs
             sw_flux_up, sw_flux_dn, sw_flux_dir,
             lw_flux_up, lw_flux_dn,
+            sw_clnclrsky_flux_up, sw_clnclrsky_flux_dn, sw_clnclrsky_flux_dir,
             sw_clrsky_flux_up, sw_clrsky_flux_dn, sw_clrsky_flux_dir,
+            sw_clnsky_flux_up, sw_clnsky_flux_dn, sw_clnsky_flux_dir,
+            lw_clnclrsky_flux_up, lw_clnclrsky_flux_dn,
             lw_clrsky_flux_up, lw_clrsky_flux_dn,
+            lw_clnsky_flux_up, lw_clnsky_flux_dn,
             sw_bnd_flux_up, sw_bnd_flux_dn, sw_bnd_flux_dir,
             lw_bnd_flux_up, lw_bnd_flux_dn, tsi_scaling, logger);
 
@@ -230,11 +244,21 @@ int run(int argc, char** argv) {
     sw_flux_dir.deallocate();
     lw_flux_up.deallocate();
     lw_flux_dn.deallocate();
+    sw_clnclrsky_flux_up.deallocate();
+    sw_clnclrsky_flux_dn.deallocate();
+    sw_clnclrsky_flux_dir.deallocate();
     sw_clrsky_flux_up.deallocate();
     sw_clrsky_flux_dn.deallocate();
     sw_clrsky_flux_dir.deallocate();
+    sw_clnsky_flux_up.deallocate();
+    sw_clnsky_flux_dn.deallocate();
+    sw_clnsky_flux_dir.deallocate();
+    lw_clnclrsky_flux_up.deallocate();
+    lw_clnclrsky_flux_dn.deallocate();
     lw_clrsky_flux_up.deallocate();
     lw_clrsky_flux_dn.deallocate();
+    lw_clnsky_flux_up.deallocate();
+    lw_clnsky_flux_dn.deallocate();
     sw_bnd_flux_up.deallocate();
     sw_bnd_flux_dn.deallocate();
     sw_bnd_flux_dir.deallocate();

From c78fa3808f78eed2fd9a9ff364e00765a7361ddf Mon Sep 17 00:00:00 2001
From: Naser Mahfouz <naser.mahfouz@pnnl.gov>
Date: Wed, 15 Nov 2023 18:33:59 -0800
Subject: [PATCH 02/11] typos in docs strings

thanks ben
---
 .../eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp      | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
index 9c5e8185e72..13a8b54304d 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
@@ -908,7 +908,7 @@ namespace scream {
             check_range(optics.tau,  0, std::numeric_limits<Real>::max(), "rrtmgp_lw:optics.tau");
 #endif
 
-            // Compute clean-sky fluxes before we add in aerosols
+            // Compute clean-clear-sky fluxes before we add in aerosols and clouds
             rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, clnsky_fluxes);
 
             // Combine gas and aerosol optics
@@ -924,7 +924,7 @@ namespace scream {
             // Compute allsky fluxes
             rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, fluxes);
 
-            // Compute clean-clear-sky fluxes
+            // Compute clean-sky fluxes
             rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics_no_aerosols, top_at_1, lw_sources, emis_sfc, clnclrsky_fluxes);
 
         }

From 10b55660f657d91e74deee14ca307a49d2a6a1d7 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 16 Nov 2023 00:47:39 -0600
Subject: [PATCH 03/11] start setting up unit test for rrtmgp_[sl]w

---
 .../rrtmgp/tests/rrtmgp_unit_tests.cpp        | 197 ++++++++++++++++++
 1 file changed, 197 insertions(+)

diff --git a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_unit_tests.cpp b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_unit_tests.cpp
index c349aa5bb0f..42e06f128c8 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_unit_tests.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_unit_tests.cpp
@@ -4,6 +4,7 @@
 #include "YAKL.h"
 #include "physics/share/physics_constants.hpp"
 #include "physics/rrtmgp/shr_orb_mod_c2f.hpp"
+#include "physics/rrtmgp/mo_load_coefficients.h"
 
 // Names of input files we will need.
 std::string coefficients_file_sw = SCREAM_DATA_DIR "/init/rrtmgp-data-sw-g112-210809.nc";
@@ -841,3 +842,199 @@ TEST_CASE("rrtmgp_aerocom_cloudtop") {
 
   yakl::finalize();
 }
+
+TEST_CASE("rrtmgp_clnclr_calls") {
+
+    // Scalar types
+    using ekat::Int;
+    #ifdef SCREAM_DOUBLE_PRECISION
+    using Real = double;
+    #else
+    using Real = float;
+    #endif
+
+    using namespace ekat::logger;
+    using logger_t = Logger<LogNoFile,LogRootRank>;
+
+    ekat::Comm comm(MPI_COMM_WORLD);
+    auto logger = std::make_shared<logger_t>("",LogLevel::info,comm);
+
+    // Initialize YAKL
+    if (!yakl::isInitialized()) { yakl::init(); }
+
+    // Create arrays
+    const int ncol = 1;
+    const int nlaym = 4;
+    const int nlay = 5;
+    logger->info(ncol);
+    logger->info(nlay);
+    auto p_lay = real2d("p_lay", ncol, nlaym);
+    auto t_lay = real2d("t_lay", ncol, nlaym);
+    auto p_lev = real2d("p_lev", ncol, nlay);
+    auto t_lev = real2d("t_lev", ncol, nlay);
+    auto mu0 = real1d("mu0", ncol);
+
+    memset(p_lay, 1000.0);
+    memset(t_lay, 275.0);
+    memset(p_lev, 1000.0);
+    memset(t_lev, 275.0);
+
+    memset(mu0, 0.5);
+
+    GasOpticsRRTMGP k_dist_sw;
+    GasOpticsRRTMGP k_dist_lw;
+
+    // Set up GasConcs
+    // Need to initialize RRTMGP with dummy gases
+    logger->info("Init gases...\n");
+    GasConcs gas_concs;
+    int ngas = 8;
+    string1d gas_names("gas_names",ngas);
+    gas_names(1) = std::string("h2o");
+    gas_names(2) = std::string("co2");
+    gas_names(3) = std::string("o3" );
+    gas_names(4) = std::string("n2o");
+    gas_names(5) = std::string("co" );
+    gas_names(6) = std::string("ch4");
+    gas_names(7) = std::string("o2" );
+    gas_names(8) = std::string("n2" );
+    gas_concs.init(gas_names,ncol,nlaym);
+    logger->info("Init RRTMGP...\n");
+    scream::rrtmgp::rrtmgp_initialize(gas_concs, coefficients_file_sw, coefficients_file_lw, cloud_optics_file_sw, cloud_optics_file_lw, logger);
+    load_and_init(k_dist_sw, coefficients_file_sw, gas_concs);
+    load_and_init(k_dist_lw, coefficients_file_lw, gas_concs);
+    
+    // Set up OpticalPRos2str
+    
+    auto nswbands = k_dist_sw.get_nband();
+    auto nlwbands = k_dist_lw.get_nband();
+    auto ngpt_sw = k_dist_sw.get_ngpt();
+    auto ngpt_lw = k_dist_lw.get_ngpt();
+
+    auto sfc_alb_dir = real2d("sfc_alb_dir", ncol, nswbands);
+    auto sfc_alb_dif = real2d("sfc_alb_dif", ncol, nswbands);
+    memset(sfc_alb_dir, 0.1);
+    memset(sfc_alb_dif, 0.2);
+
+    OpticalProps2str aerosol_sw;
+    OpticalProps1scl aerosol_lw;
+    aerosol_sw.init(k_dist_sw.get_band_lims_wavenumber());
+    aerosol_sw.alloc_2str(ncol, nlaym);
+    memset(aerosol_sw.tau, 100.0);
+    memset(aerosol_sw.ssa, 0.5);
+    memset(aerosol_sw.g, 0.1);
+
+    OpticalProps2str clouds_sw;
+    OpticalProps1scl clouds_lw;
+    clouds_sw.init(k_dist_sw.get_band_lims_wavenumber(), k_dist_sw.get_band_lims_gpoint());
+    clouds_sw.alloc_2str(ncol, nlaym);
+    memset(clouds_sw.tau, 50.0);
+    memset(clouds_sw.ssa, 0.4);
+    memset(clouds_sw.g, 0.05);
+
+    auto sw_flux_up = real2d("sw_flux_up", ncol, nlay);
+    auto sw_flux_dn = real2d("sw_flux_dn", ncol, nlay);
+    auto sw_flux_dn_dir = real2d("sw_flux_dn_dir", ncol, nlay);
+    auto sw_bnd_flux_up = real3d("sw_bnd_flux_up", ncol, nlay, nswbands);
+    auto sw_bnd_flux_dn = real3d("sw_bnd_flux_dn", ncol, nlay, nswbands);
+    auto sw_bnd_flux_dn_dir = real3d("sw_bnd_flux_dn_dir", ncol, nlay, nswbands);
+
+    auto sw_clnclrsky_flux_up = real2d("sw_clnclrsky_flux_up", ncol, nlay);
+    auto sw_clnclrsky_flux_dn = real2d("sw_clnclrsky_flux_dn", ncol, nlay);
+    auto sw_clnclrsky_flux_dn_dir = real2d("sw_clnclrsky_flux_dn_dir", ncol, nlay);
+
+    auto sw_clrsky_flux_up = real2d("sw_clrsky_flux_up", ncol, nlay);
+    auto sw_clrsky_flux_dn = real2d("sw_clrsky_flux_dn", ncol, nlay);
+    auto sw_clrsky_flux_dn_dir = real2d("sw_clrsky_flux_dn_dir", ncol, nlay);
+
+    auto sw_clnsky_flux_up = real2d("sw_clnsky_flux_up", ncol, nlay);
+    auto sw_clnsky_flux_dn = real2d("sw_clnsky_flux_dn", ncol, nlay);
+    auto sw_clnsky_flux_dn_dir = real2d("sw_clnsky_flux_dn_dir", ncol, nlay);    
+
+    FluxesByband fluxes_sw;
+    fluxes_sw.flux_up = sw_flux_up;
+    fluxes_sw.flux_dn = sw_flux_dn;
+    fluxes_sw.flux_dn_dir = sw_flux_dn_dir;
+    fluxes_sw.bnd_flux_up = sw_bnd_flux_up;
+    fluxes_sw.bnd_flux_dn = sw_bnd_flux_dn;
+    fluxes_sw.bnd_flux_dn_dir = sw_bnd_flux_dn_dir;
+    // Clean-clear-sky
+    FluxesBroadband clnclrsky_fluxes_sw;
+    clnclrsky_fluxes_sw.flux_up = sw_clnclrsky_flux_up;
+    clnclrsky_fluxes_sw.flux_dn = sw_clnclrsky_flux_dn;
+    clnclrsky_fluxes_sw.flux_dn_dir = sw_clnclrsky_flux_dn_dir;
+    // Clear-sky
+    FluxesBroadband clrsky_fluxes_sw;
+    clrsky_fluxes_sw.flux_up = sw_clrsky_flux_up;
+    clrsky_fluxes_sw.flux_dn = sw_clrsky_flux_dn;
+    clrsky_fluxes_sw.flux_dn_dir = sw_clrsky_flux_dn_dir;
+    // Clean-sky
+    FluxesBroadband clnsky_fluxes_sw;
+    clnsky_fluxes_sw.flux_up = sw_clnsky_flux_up;
+    clnsky_fluxes_sw.flux_dn = sw_clnsky_flux_dn;
+    clnsky_fluxes_sw.flux_dn_dir = sw_clnsky_flux_dn_dir;
+
+    // Setup pointers to RRTMGP LW fluxes
+    logger->info(ncol);
+    logger->info(nlay);
+    auto lw_flux_up = real2d("lw_flux_up", ncol, nlay);
+    auto lw_flux_dn = real2d("lw_flux_dn", ncol, nlay);
+    auto lw_bnd_flux_up = real3d("lw_bnd_flux_up", ncol, nlay, nlwbands);
+    auto lw_bnd_flux_dn = real3d("lw_bnd_flux_dn", ncol, nlay, nlwbands);
+
+    auto lw_clnclrsky_flux_up = real2d("lw_clnclrsky_flux_up", ncol, nlay);
+    auto lw_clnclrsky_flux_dn = real2d("lw_clnclrsky_flux_dn", ncol, nlay);
+
+    auto lw_clrsky_flux_up = real2d("lw_clrsky_flux_up", ncol, nlay);
+    auto lw_clrsky_flux_dn = real2d("lw_clrsky_flux_dn", ncol, nlay);
+
+    auto lw_clnsky_flux_up = real2d("lw_clnsky_flux_up", ncol, nlay);
+    auto lw_clnsky_flux_dn = real2d("lw_clnsky_flux_dn", ncol, nlay);
+
+    FluxesByband fluxes_lw;
+    fluxes_lw.flux_up = lw_flux_up;
+    fluxes_lw.flux_dn = lw_flux_dn;
+    fluxes_lw.bnd_flux_up = lw_bnd_flux_up;
+    fluxes_lw.bnd_flux_dn = lw_bnd_flux_dn;
+    // Clean-clear-sky
+    FluxesBroadband clnclrsky_fluxes_lw;
+    clnclrsky_fluxes_lw.flux_up = lw_clnclrsky_flux_up;
+    clnclrsky_fluxes_lw.flux_dn = lw_clnclrsky_flux_dn;
+    // Clear-sky
+    FluxesBroadband clrsky_fluxes_lw;
+    clrsky_fluxes_lw.flux_up = lw_clrsky_flux_up;
+    clrsky_fluxes_lw.flux_dn = lw_clrsky_flux_dn;
+    // Clean-sky
+    FluxesBroadband clnsky_fluxes_lw;
+    clnsky_fluxes_lw.flux_up = lw_clnsky_flux_up;
+    clnsky_fluxes_lw.flux_dn = lw_clnsky_flux_dn;
+
+    const Real tsi_scaling = 1;
+
+    scream::rrtmgp::rrtmgp_sw(ncol, nlaym,
+        k_dist_sw,
+        p_lay, t_lay, p_lev, t_lev,
+        gas_concs,
+        sfc_alb_dir, sfc_alb_dif, mu0,
+        aerosol_sw, clouds_sw,
+        fluxes_sw, clnclrsky_fluxes_sw, clrsky_fluxes_sw, clnsky_fluxes_sw,
+        tsi_scaling,
+        logger
+    );
+
+    logger->info(sw_clnsky_flux_up.createHostCopy()(1,3));
+
+    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,1) == sw_flux_up.createHostCopy()(1,1));  // ??
+    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,2) == sw_flux_up.createHostCopy()(1,2));  // ??
+    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,3) == sw_flux_up.createHostCopy()(1,3));  // ??
+
+    scream::rrtmgp::rrtmgp_finalize();
+
+    p_lay.deallocate();
+    t_lay.deallocate();
+    p_lev.deallocate();
+    t_lev.deallocate();
+    sfc_alb_dir.deallocate();
+    sfc_alb_dif.deallocate();
+    mu0.deallocate();
+}

From d797fb7b5fb01ac2da3ef85c28623900765969f2 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 16 Nov 2023 01:51:16 -0600
Subject: [PATCH 04/11] add sanity check of sw clnsky to rrtmgp_tests

the lw ones seem to be flaky, not sure why.
---
 components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
index 4fc73a46b08..77c0b21b088 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
@@ -231,6 +231,12 @@ int run(int argc, char** argv) {
     if (!rrtmgpTest::all_close(lw_flux_up_ref , lw_flux_up , 0.001)) nerr++;
     if (!rrtmgpTest::all_close(lw_flux_dn_ref , lw_flux_dn , 0.001)) nerr++;
 
+    // Because the aerosol optical properties are all set to zero, these fluxes must be equal
+    if (!rrtmgpTest::all_close(sw_flux_up , sw_clnsky_flux_up , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(sw_clrsky_flux_up , sw_clnclrsky_flux_up , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(sw_flux_dn , sw_clnsky_flux_dn , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(sw_clrsky_flux_dn , sw_clnclrsky_flux_dn , 0.0000000001)) nerr++;
+
     logger->info("Cleaning up...\n");
     // Clean up or else YAKL will throw errors
     scream::rrtmgp::rrtmgp_finalize();

From 8f43e4de98f38efbed6e772cbf90b1b5b8f0ec85 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Fri, 17 Nov 2023 12:38:49 -0600
Subject: [PATCH 05/11] fix bug in lw cln/clr calls and add checks

---
 .../eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp  | 4 ++--
 .../eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp       | 8 ++++++++
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
index 13a8b54304d..66da96a75ae 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
@@ -909,7 +909,7 @@ namespace scream {
 #endif
 
             // Compute clean-clear-sky fluxes before we add in aerosols and clouds
-            rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, clnsky_fluxes);
+            rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, clnclrsky_fluxes);
 
             // Combine gas and aerosol optics
             aerosol.increment(optics);
@@ -925,7 +925,7 @@ namespace scream {
             rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, fluxes);
 
             // Compute clean-sky fluxes
-            rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics_no_aerosols, top_at_1, lw_sources, emis_sfc, clnclrsky_fluxes);
+            rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics_no_aerosols, top_at_1, lw_sources, emis_sfc, clnsky_fluxes);
 
         }
 
diff --git a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
index 77c0b21b088..9a414b878ce 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
@@ -236,6 +236,14 @@ int run(int argc, char** argv) {
     if (!rrtmgpTest::all_close(sw_clrsky_flux_up , sw_clnclrsky_flux_up , 0.0000000001)) nerr++;
     if (!rrtmgpTest::all_close(sw_flux_dn , sw_clnsky_flux_dn , 0.0000000001)) nerr++;
     if (!rrtmgpTest::all_close(sw_clrsky_flux_dn , sw_clnclrsky_flux_dn , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(sw_flux_dir , sw_clnsky_flux_dir , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(sw_clrsky_flux_dir , sw_clnclrsky_flux_dir , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(lw_flux_up , lw_clnsky_flux_up , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(lw_clrsky_flux_up , lw_clnclrsky_flux_up , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(lw_flux_dn , lw_clnsky_flux_dn , 0.0000000001)) nerr++;
+    if (!rrtmgpTest::all_close(lw_clrsky_flux_dn , lw_clnclrsky_flux_dn , 0.0000000001)) nerr++;
+
+    logger->info(nerr);
 
     logger->info("Cleaning up...\n");
     // Clean up or else YAKL will throw errors

From f887c8565e09c0f82add655930d9af3703ee1374 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Mon, 20 Nov 2023 11:04:40 -0600
Subject: [PATCH 06/11] comment out rrtmgp_[ls]w unit test for now

---
 .../rrtmgp/tests/rrtmgp_unit_tests.cpp        | 30 ++++++++++++-------
 1 file changed, 19 insertions(+), 11 deletions(-)

diff --git a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_unit_tests.cpp b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_unit_tests.cpp
index 42e06f128c8..9150daf3d85 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_unit_tests.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_unit_tests.cpp
@@ -843,6 +843,7 @@ TEST_CASE("rrtmgp_aerocom_cloudtop") {
   yakl::finalize();
 }
 
+/* comment out for now
 TEST_CASE("rrtmgp_clnclr_calls") {
 
     // Scalar types
@@ -900,12 +901,13 @@ TEST_CASE("rrtmgp_clnclr_calls") {
     gas_names(8) = std::string("n2" );
     gas_concs.init(gas_names,ncol,nlaym);
     logger->info("Init RRTMGP...\n");
-    scream::rrtmgp::rrtmgp_initialize(gas_concs, coefficients_file_sw, coefficients_file_lw, cloud_optics_file_sw, cloud_optics_file_lw, logger);
+    scream::rrtmgp::rrtmgp_initialize(gas_concs, coefficients_file_sw,
+coefficients_file_lw, cloud_optics_file_sw, cloud_optics_file_lw, logger);
     load_and_init(k_dist_sw, coefficients_file_sw, gas_concs);
     load_and_init(k_dist_lw, coefficients_file_lw, gas_concs);
-    
+
     // Set up OpticalPRos2str
-    
+
     auto nswbands = k_dist_sw.get_nband();
     auto nlwbands = k_dist_lw.get_nband();
     auto ngpt_sw = k_dist_sw.get_ngpt();
@@ -926,8 +928,8 @@ TEST_CASE("rrtmgp_clnclr_calls") {
 
     OpticalProps2str clouds_sw;
     OpticalProps1scl clouds_lw;
-    clouds_sw.init(k_dist_sw.get_band_lims_wavenumber(), k_dist_sw.get_band_lims_gpoint());
-    clouds_sw.alloc_2str(ncol, nlaym);
+    clouds_sw.init(k_dist_sw.get_band_lims_wavenumber(),
+k_dist_sw.get_band_lims_gpoint()); clouds_sw.alloc_2str(ncol, nlaym);
     memset(clouds_sw.tau, 50.0);
     memset(clouds_sw.ssa, 0.4);
     memset(clouds_sw.g, 0.05);
@@ -937,11 +939,13 @@ TEST_CASE("rrtmgp_clnclr_calls") {
     auto sw_flux_dn_dir = real2d("sw_flux_dn_dir", ncol, nlay);
     auto sw_bnd_flux_up = real3d("sw_bnd_flux_up", ncol, nlay, nswbands);
     auto sw_bnd_flux_dn = real3d("sw_bnd_flux_dn", ncol, nlay, nswbands);
-    auto sw_bnd_flux_dn_dir = real3d("sw_bnd_flux_dn_dir", ncol, nlay, nswbands);
+    auto sw_bnd_flux_dn_dir = real3d("sw_bnd_flux_dn_dir", ncol, nlay,
+nswbands);
 
     auto sw_clnclrsky_flux_up = real2d("sw_clnclrsky_flux_up", ncol, nlay);
     auto sw_clnclrsky_flux_dn = real2d("sw_clnclrsky_flux_dn", ncol, nlay);
-    auto sw_clnclrsky_flux_dn_dir = real2d("sw_clnclrsky_flux_dn_dir", ncol, nlay);
+    auto sw_clnclrsky_flux_dn_dir = real2d("sw_clnclrsky_flux_dn_dir", ncol,
+nlay);
 
     auto sw_clrsky_flux_up = real2d("sw_clrsky_flux_up", ncol, nlay);
     auto sw_clrsky_flux_dn = real2d("sw_clrsky_flux_dn", ncol, nlay);
@@ -949,7 +953,7 @@ TEST_CASE("rrtmgp_clnclr_calls") {
 
     auto sw_clnsky_flux_up = real2d("sw_clnsky_flux_up", ncol, nlay);
     auto sw_clnsky_flux_dn = real2d("sw_clnsky_flux_dn", ncol, nlay);
-    auto sw_clnsky_flux_dn_dir = real2d("sw_clnsky_flux_dn_dir", ncol, nlay);    
+    auto sw_clnsky_flux_dn_dir = real2d("sw_clnsky_flux_dn_dir", ncol, nlay);
 
     FluxesByband fluxes_sw;
     fluxes_sw.flux_up = sw_flux_up;
@@ -1024,9 +1028,12 @@ TEST_CASE("rrtmgp_clnclr_calls") {
 
     logger->info(sw_clnsky_flux_up.createHostCopy()(1,3));
 
-    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,1) == sw_flux_up.createHostCopy()(1,1));  // ??
-    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,2) == sw_flux_up.createHostCopy()(1,2));  // ??
-    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,3) == sw_flux_up.createHostCopy()(1,3));  // ??
+    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,1) ==
+sw_flux_up.createHostCopy()(1,1));  // ??
+    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,2) ==
+sw_flux_up.createHostCopy()(1,2));  // ??
+    // REQUIRE(sw_clnsky_flux_up.createHostCopy()(1,3) ==
+sw_flux_up.createHostCopy()(1,3));  // ??
 
     scream::rrtmgp::rrtmgp_finalize();
 
@@ -1038,3 +1045,4 @@ TEST_CASE("rrtmgp_clnclr_calls") {
     sfc_alb_dif.deallocate();
     mu0.deallocate();
 }
+*/

From f3525897becf50925a146d54db50408e31cd1bae Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Fri, 24 Nov 2023 18:53:23 -0600
Subject: [PATCH 07/11] guard compute-heavy statements by runtime flags

---
 .../rrtmgp/eamxx_rrtmgp_process_interface.cpp |  7 +-
 .../rrtmgp/eamxx_rrtmgp_process_interface.hpp |  3 +
 .../rrtmgp/scream_rrtmgp_interface.cpp        | 81 ++++++++++++-------
 .../rrtmgp/scream_rrtmgp_interface.hpp        |  9 ++-
 .../src/physics/rrtmgp/tests/rrtmgp_tests.cpp |  5 +-
 5 files changed, 70 insertions(+), 35 deletions(-)

diff --git a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
index 1e896053757..fcbff168182 100644
--- a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
@@ -120,6 +120,10 @@ void RRTMGPRadiation::set_grids(const std::shared_ptr<const GridsManager> grids_
     add_field<Required>("aero_tau_lw", scalar3d_lwband_layout, nondim, grid_name, ps);
   }
 
+  // Whether we do extra clean/clear sky calculations
+  m_extra_clnclrsky_diag = m_params.get<bool>("extra_clnclrsky_diag",false);
+  m_extra_clnsky_diag    = m_params.get<bool>("extra_clnsky_diag",false);
+
   // Set computed (output) fields
   add_field<Updated >("T_mid"     , scalar3d_layout_mid, K  , grid_name, ps);
   add_field<Computed>("SW_flux_dn", scalar3d_layout_int, Wm2, grid_name, "RESTART", ps);
@@ -904,7 +908,8 @@ void RRTMGPRadiation::run_impl (const double dt) {
         lw_clrsky_flux_up, lw_clrsky_flux_dn,
         lw_clnsky_flux_up, lw_clnsky_flux_dn,
         sw_bnd_flux_up   , sw_bnd_flux_dn   , sw_bnd_flux_dir      , lw_bnd_flux_up   , lw_bnd_flux_dn,
-        eccf, m_atm_logger
+        eccf, m_atm_logger,
+        m_extra_clnclrsky_diag, m_extra_clnsky_diag
       );
 
       // Update heating tendency
diff --git a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.hpp b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.hpp
index 4562fd59117..150a9e2fc80 100644
--- a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.hpp
+++ b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.hpp
@@ -59,6 +59,9 @@ class RRTMGPRadiation : public AtmosphereProcess {
 
   // Whether we use aerosol forcing in radiation
   bool m_do_aerosol_rad;
+  // Whether we do extra aerosol forcing calls
+  bool m_extra_clnsky_diag;
+  bool m_extra_clnclrsky_diag;
 
   // The orbital year, used for zenith angle calculations:
   // If > 0, use constant orbital year for duration of simulation
diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
index 66da96a75ae..c409718b702 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
@@ -231,7 +231,8 @@ namespace scream {
                 real3d &sw_bnd_flux_up, real3d &sw_bnd_flux_dn, real3d &sw_bnd_flux_dn_dir,
                 real3d &lw_bnd_flux_up, real3d &lw_bnd_flux_dn,
                 const Real tsi_scaling,
-                const std::shared_ptr<spdlog::logger>& logger) {
+                const std::shared_ptr<spdlog::logger>& logger,
+                const bool extra_clnclrsky_diag, const bool extra_clnsky_diag) {
 
 #ifdef SCREAM_RRTMGP_DEBUG
             // Sanity check inputs, and possibly repair
@@ -363,7 +364,8 @@ namespace scream {
                 k_dist_sw, p_lay, t_lay, p_lev, t_lev, gas_concs, 
                 sfc_alb_dir, sfc_alb_dif, mu0, aerosol_sw, clouds_sw_gpt,
                 fluxes_sw, clnclrsky_fluxes_sw, clrsky_fluxes_sw, clnsky_fluxes_sw,
-                tsi_scaling, logger
+                tsi_scaling, logger,
+                extra_clnclrsky_diag, extra_clnsky_diag
             );
 
             // Do longwave
@@ -371,7 +373,8 @@ namespace scream {
                 ncol, nlay,
                 k_dist_lw, p_lay, t_lay, p_lev, t_lev, gas_concs,
                 aerosol_lw, clouds_lw_gpt,
-                fluxes_lw, clnclrsky_fluxes_lw, clrsky_fluxes_lw, clnsky_fluxes_lw
+                fluxes_lw, clnclrsky_fluxes_lw, clrsky_fluxes_lw, clnsky_fluxes_lw,
+                extra_clnclrsky_diag, extra_clnsky_diag
             );
             
         }
@@ -602,7 +605,8 @@ namespace scream {
                 OpticalProps2str &aerosol, OpticalProps2str &clouds,
                 FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes,
                 const Real tsi_scaling,
-                const std::shared_ptr<spdlog::logger>& logger) {
+                const std::shared_ptr<spdlog::logger>& logger,
+                const bool extra_clnclrsky_diag, const bool extra_clnsky_diag) {
 
             // Get problem sizes
             int nbnd = k_dist.get_nband();
@@ -766,7 +770,9 @@ namespace scream {
             bool top_at_1 = p_lay_host(1, 1) < p_lay_host(1, nlay);
 
             k_dist.gas_optics(nday, nlay, top_at_1, p_lay_day, p_lev_day, t_lay_limited, gas_concs_day, optics, toa_flux);
-            k_dist.gas_optics(nday, nlay, top_at_1, p_lay_day, p_lev_day, t_lay_limited, gas_concs_day, optics_no_aerosols, toa_flux);
+            if (extra_clnsky_diag) {
+                k_dist.gas_optics(nday, nlay, top_at_1, p_lay_day, p_lev_day, t_lay_limited, gas_concs_day, optics_no_aerosols, toa_flux);
+            }
 
 
 #ifdef SCREAM_RRTMGP_DEBUG
@@ -781,15 +787,17 @@ namespace scream {
                 toa_flux(iday,igpt) = tsi_scaling * toa_flux(iday,igpt);
             });
 
-            // Compute clear-clean-sky (just gas) fluxes on daytime columns
-            rte_sw(optics, top_at_1, mu0_day, toa_flux, sfc_alb_dir_T, sfc_alb_dif_T, fluxes_day);
-            // Expand daytime fluxes to all columns
-            parallel_for(SimpleBounds<2>(nlay+1,nday), YAKL_LAMBDA(int ilev, int iday) {
-                int icol = dayIndices(iday);
-                clnclrsky_flux_up    (icol,ilev) = flux_up_day    (iday,ilev);
-                clnclrsky_flux_dn    (icol,ilev) = flux_dn_day    (iday,ilev);
-                clnclrsky_flux_dn_dir(icol,ilev) = flux_dn_dir_day(iday,ilev);
-            });
+            if (extra_clnclrsky_diag) {
+                // Compute clear-clean-sky (just gas) fluxes on daytime columns
+                rte_sw(optics, top_at_1, mu0_day, toa_flux, sfc_alb_dir_T, sfc_alb_dif_T, fluxes_day);
+                // Expand daytime fluxes to all columns
+                parallel_for(SimpleBounds<2>(nlay+1,nday), YAKL_LAMBDA(int ilev, int iday) {
+                    int icol = dayIndices(iday);
+                    clnclrsky_flux_up    (icol,ilev) = flux_up_day    (iday,ilev);
+                    clnclrsky_flux_dn    (icol,ilev) = flux_dn_day    (iday,ilev);
+                    clnclrsky_flux_dn_dir(icol,ilev) = flux_dn_dir_day(iday,ilev);
+                });
+            }
 
             // Combine gas and aerosol optics
             aerosol_day.delta_scale();
@@ -826,15 +834,19 @@ namespace scream {
                 bnd_flux_dn    (icol,ilev,ibnd) = bnd_flux_dn_day    (iday,ilev,ibnd);
                 bnd_flux_dn_dir(icol,ilev,ibnd) = bnd_flux_dn_dir_day(iday,ilev,ibnd);
             });
-            // Compute cleansky (gas + clouds) fluxes on daytime columns
-            rte_sw(optics_no_aerosols, top_at_1, mu0_day, toa_flux, sfc_alb_dir_T, sfc_alb_dif_T, fluxes_day);
-            // Expand daytime fluxes to all columns
-            parallel_for(SimpleBounds<2>(nlay+1,nday), YAKL_LAMBDA(int ilev, int iday) {
-                int icol = dayIndices(iday);
-                clnsky_flux_up    (icol,ilev) = flux_up_day    (iday,ilev);
-                clnsky_flux_dn    (icol,ilev) = flux_dn_day    (iday,ilev);
-                clnsky_flux_dn_dir(icol,ilev) = flux_dn_dir_day(iday,ilev);
-            });
+
+            if (extra_clnsky_diag) {
+                // Compute cleansky (gas + clouds) fluxes on daytime columns
+                rte_sw(optics_no_aerosols, top_at_1, mu0_day, toa_flux, sfc_alb_dir_T, sfc_alb_dif_T, fluxes_day);
+                // Expand daytime fluxes to all columns
+                parallel_for(SimpleBounds<2>(nlay+1,nday), YAKL_LAMBDA(int ilev, int iday) {
+                    int icol = dayIndices(iday);
+                    clnsky_flux_up    (icol,ilev) = flux_up_day    (iday,ilev);
+                    clnsky_flux_dn    (icol,ilev) = flux_dn_day    (iday,ilev);
+                    clnsky_flux_dn_dir(icol,ilev) = flux_dn_dir_day(iday,ilev);
+                });
+            }
+
         }
 
         void rrtmgp_lw(
@@ -844,7 +856,8 @@ namespace scream {
                 GasConcs &gas_concs,
                 OpticalProps1scl &aerosol,
                 OpticalProps1scl &clouds,
-                FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes) {
+                FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes,
+                const bool extra_clnclrsky_diag, const bool extra_clnsky_diag) {
 
             // Problem size
             int nbnd = k_dist.get_nband();
@@ -901,15 +914,19 @@ namespace scream {
 
             // Do gas optics
             k_dist.gas_optics(ncol, nlay, top_at_1, p_lay, p_lev, t_lay_limited, t_sfc, gas_concs, optics, lw_sources, real2d(), t_lev_limited);
-            k_dist.gas_optics(ncol, nlay, top_at_1, p_lay, p_lev, t_lay_limited, t_sfc, gas_concs, optics_no_aerosols, lw_sources, real2d(), t_lev_limited);
+            if (extra_clnclrsky_diag) {
+                k_dist.gas_optics(ncol, nlay, top_at_1, p_lay, p_lev, t_lay_limited, t_sfc, gas_concs, optics_no_aerosols, lw_sources, real2d(), t_lev_limited);
+            }
 
 #ifdef SCREAM_RRTMGP_DEBUG
             // Check gas optics
             check_range(optics.tau,  0, std::numeric_limits<Real>::max(), "rrtmgp_lw:optics.tau");
 #endif
 
-            // Compute clean-clear-sky fluxes before we add in aerosols and clouds
-            rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, clnclrsky_fluxes);
+            if (extra_clnclrsky_diag) {    
+                // Compute clean-clear-sky fluxes before we add in aerosols and clouds
+                rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, clnclrsky_fluxes);
+            }
 
             // Combine gas and aerosol optics
             aerosol.increment(optics);
@@ -919,13 +936,17 @@ namespace scream {
 
             // Combine gas and cloud optics
             clouds.increment(optics);
-            clouds.increment(optics_no_aerosols);
+            if (extra_clnsky_diag) {
+                clouds.increment(optics_no_aerosols);
+            }
 
             // Compute allsky fluxes
             rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics, top_at_1, lw_sources, emis_sfc, fluxes);
 
-            // Compute clean-sky fluxes
-            rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics_no_aerosols, top_at_1, lw_sources, emis_sfc, clnsky_fluxes);
+            if (extra_clnsky_diag) {
+                // Compute clean-sky fluxes
+                rte_lw(max_gauss_pts, gauss_Ds, gauss_wts, optics_no_aerosols, top_at_1, lw_sources, emis_sfc, clnsky_fluxes);
+            }
 
         }
 
diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
index dabdc6d0107..65e16542286 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
@@ -81,7 +81,8 @@ namespace scream {
                 real3d &sw_bnd_flux_up, real3d &sw_bnd_flux_dn, real3d &sw_bnd_flux_dn_dir,
                 real3d &lw_bnd_flux_up, real3d &lw_bnd_flux_dn,
                 const Real tsi_scaling,
-                const std::shared_ptr<spdlog::logger>& logger);
+                const std::shared_ptr<spdlog::logger>& logger,
+                const bool extra_clnclrsky_diag = false, const bool extra_clnsky_diag = false);
         /*
          * Perform any clean-up tasks
          */
@@ -97,7 +98,8 @@ namespace scream {
                 OpticalProps2str &aerosol, OpticalProps2str &clouds,
                 FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes,
                 const Real tsi_scaling,
-                const std::shared_ptr<spdlog::logger>& logger);
+                const std::shared_ptr<spdlog::logger>& logger,
+                const bool extra_clnclrsky_diag, const bool extra_clnsky_diag);
         /*
          * Longwave driver (called by rrtmgp_main)
          */
@@ -107,7 +109,8 @@ namespace scream {
                 real2d &p_lay, real2d &t_lay, real2d &p_lev, real2d &t_lev,
                 GasConcs &gas_concs,
                 OpticalProps1scl &aerosol, OpticalProps1scl &clouds,
-                FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes);
+                FluxesByband &fluxes, FluxesBroadband &clnclrsky_fluxes, FluxesBroadband &clrsky_fluxes, FluxesBroadband &clnsky_fluxes,
+                const bool extra_clnclrsky_diag, const bool extra_clnsky_diag);
         /*
          * Return a subcolumn mask consistent with a specified overlap assumption
          */
diff --git a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
index 9a414b878ce..3707522ee9a 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
@@ -215,7 +215,10 @@ int run(int argc, char** argv) {
             lw_clrsky_flux_up, lw_clrsky_flux_dn,
             lw_clnsky_flux_up, lw_clnsky_flux_dn,
             sw_bnd_flux_up, sw_bnd_flux_dn, sw_bnd_flux_dir,
-            lw_bnd_flux_up, lw_bnd_flux_dn, tsi_scaling, logger);
+            lw_bnd_flux_up, lw_bnd_flux_dn, tsi_scaling, logger,
+            true, true // extra_clnclrsky_diag, extra_clnsky_diag
+            // set them to true because we actually test them below
+          );
 
     // Check values against baseline
     logger->info("Check values...\n");

From 20a3320d2c0ca3838fdfb939ef78ea8fd9213643 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Fri, 24 Nov 2023 19:11:09 -0600
Subject: [PATCH 08/11] add docs

---
 components/eamxx/docs/technical/clean_clear_sky.md | 10 ++++++++++
 components/eamxx/mkdocs.yml                        |  1 +
 2 files changed, 11 insertions(+)
 create mode 100644 components/eamxx/docs/technical/clean_clear_sky.md

diff --git a/components/eamxx/docs/technical/clean_clear_sky.md b/components/eamxx/docs/technical/clean_clear_sky.md
new file mode 100644
index 00000000000..82380f90315
--- /dev/null
+++ b/components/eamxx/docs/technical/clean_clear_sky.md
@@ -0,0 +1,10 @@
+# Clean- and clean-clear-sky diagnostics
+
+In order to decompose the aerosol effective radiative forcing, additional diagnostic radiation calls are needed.
+These extra diagnostics are optionally added to the main radiation call. The extra diagnostics are:
+
+- Clean-clear-sky fluxes: the fluxes that would be present if there were neither aerosols nor clouds, and are calculated by adding an additional radiation call at the very beginning of the logic before the optics class is endowed with aerosol and cloud properties.
+- Clean-sky fluxes: the fluxes that would be present if there were no aerosols, and are calculated by adding an additional radiation call after substantiating an additional optics class, but not endowing it with aerosol properties.
+
+It was necessary to add an additional optics class because the original optics class is endowed with aerosols before clouds (in order to calculate the clear-sky fluxes).
+The extra calls are controlled by runtime flags `extra_clnclrsky_diag` and `extra_clnsky_diag` (they take either `true` or `false` as their values).
diff --git a/components/eamxx/mkdocs.yml b/components/eamxx/mkdocs.yml
index d97752bd524..5e04e6ba250 100644
--- a/components/eamxx/mkdocs.yml
+++ b/components/eamxx/mkdocs.yml
@@ -26,6 +26,7 @@ nav:
       - 'CI and Nightly Testing': 'developer/ci_nightly.md'
   - 'Technical Guide':
     - 'AeroCOM cloud top': 'technical/aerocom_cldtop.md'
+    - 'Extra radiation calls': 'technical/clean_clear_sky.md'
 
 edit_uri: ""
 

From f8bcb2020dbe0b6b3d416532f778d010b0d73845 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Fri, 24 Nov 2023 21:11:23 -0600
Subject: [PATCH 09/11] add new runtimes flags to defaults as false

---
 .../cime_config/namelist_defaults_scream.xml   |  2 ++
 .../physics/rrtmgp/scream_rrtmgp_interface.cpp | 18 ++++++++++++------
 2 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/components/eamxx/cime_config/namelist_defaults_scream.xml b/components/eamxx/cime_config/namelist_defaults_scream.xml
index 7cf79f67d9a..1a5f19f0c9d 100644
--- a/components/eamxx/cime_config/namelist_defaults_scream.xml
+++ b/components/eamxx/cime_config/namelist_defaults_scream.xml
@@ -308,6 +308,8 @@ be lost if SCREAM_HACK_XML is not enabled.
       <do_aerosol_rad>true</do_aerosol_rad>
       <do_aerosol_rad COMPSET=".*SCREAM.*noAero">false</do_aerosol_rad>
       <enable_column_conservation_checks>false</enable_column_conservation_checks>
+      <extra_clnclrsky_diag>false</extra_clnclrsky_diag>
+      <extra_clnsky_diag>false</extra_clnsky_diag>
     </rrtmgp>
 
     <mac_aero_mic inherit="atm_proc_group">
diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
index c409718b702..e77ab3fce68 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
@@ -756,9 +756,11 @@ namespace scream {
             OpticalProps2str optics;
             optics.alloc_2str(nday, nlay, k_dist);
 
-            // Allocate space for optical properties (no aerosols)
             OpticalProps2str optics_no_aerosols;
-            optics_no_aerosols.alloc_2str(nday, nlay, k_dist);
+            if (extra_clnsky_diag) {
+                // Allocate space for optical properties (no aerosols)
+                optics_no_aerosols.alloc_2str(nday, nlay, k_dist);
+            }
 
             // Limit temperatures for gas optics look-up tables
             auto t_lay_limited = real2d("t_lay_limited", nday, nlay);
@@ -818,7 +820,9 @@ namespace scream {
             // Combine gas and cloud optics
             clouds_day.delta_scale();
             clouds_day.increment(optics);
-            clouds_day.increment(optics_no_aerosols);
+            if (extra_clnsky_diag) {
+                clouds_day.increment(optics_no_aerosols);
+            }
             // Compute fluxes on daytime columns
             rte_sw(optics, top_at_1, mu0_day, toa_flux, sfc_alb_dir_T, sfc_alb_dif_T, fluxes_day);
             // Expand daytime fluxes to all columns
@@ -865,9 +869,11 @@ namespace scream {
             // Allocate space for optical properties
             OpticalProps1scl optics;
             optics.alloc_1scl(ncol, nlay, k_dist);
-            // Allocate space for optical properties (no aerosols)
             OpticalProps1scl optics_no_aerosols;
-            optics_no_aerosols.alloc_1scl(ncol, nlay, k_dist);
+            if (extra_clnsky_diag) {
+                // Allocate space for optical properties (no aerosols)
+                optics_no_aerosols.alloc_1scl(ncol, nlay, k_dist);
+            }
 
             // Boundary conditions
             SourceFuncLW lw_sources;
@@ -914,7 +920,7 @@ namespace scream {
 
             // Do gas optics
             k_dist.gas_optics(ncol, nlay, top_at_1, p_lay, p_lev, t_lay_limited, t_sfc, gas_concs, optics, lw_sources, real2d(), t_lev_limited);
-            if (extra_clnclrsky_diag) {
+            if (extra_clnsky_diag) {
                 k_dist.gas_optics(ncol, nlay, top_at_1, p_lay, p_lev, t_lay_limited, t_sfc, gas_concs, optics_no_aerosols, lw_sources, real2d(), t_lev_limited);
             }
 

From 8f314db5e620783804d1979de7a627ad0558fe32 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Fri, 24 Nov 2023 22:41:57 -0600
Subject: [PATCH 10/11] for the tests to pass, must default to true (if not
 set)

---
 .../src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp     | 4 ++--
 .../eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp      | 2 +-
 components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp    | 4 +---
 3 files changed, 4 insertions(+), 6 deletions(-)

diff --git a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
index fcbff168182..69427e5fa49 100644
--- a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
@@ -121,8 +121,8 @@ void RRTMGPRadiation::set_grids(const std::shared_ptr<const GridsManager> grids_
   }
 
   // Whether we do extra clean/clear sky calculations
-  m_extra_clnclrsky_diag = m_params.get<bool>("extra_clnclrsky_diag",false);
-  m_extra_clnsky_diag    = m_params.get<bool>("extra_clnsky_diag",false);
+  m_extra_clnclrsky_diag = m_params.get<bool>("extra_clnclrsky_diag", true);
+  m_extra_clnsky_diag    = m_params.get<bool>("extra_clnsky_diag", true);
 
   // Set computed (output) fields
   add_field<Updated >("T_mid"     , scalar3d_layout_mid, K  , grid_name, ps);
diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
index 65e16542286..d169b2de263 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
@@ -82,7 +82,7 @@ namespace scream {
                 real3d &lw_bnd_flux_up, real3d &lw_bnd_flux_dn,
                 const Real tsi_scaling,
                 const std::shared_ptr<spdlog::logger>& logger,
-                const bool extra_clnclrsky_diag = false, const bool extra_clnsky_diag = false);
+                const bool extra_clnclrsky_diag = true, const bool extra_clnsky_diag = true);
         /*
          * Perform any clean-up tasks
          */
diff --git a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
index 3707522ee9a..70881c736a0 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
@@ -215,9 +215,7 @@ int run(int argc, char** argv) {
             lw_clrsky_flux_up, lw_clrsky_flux_dn,
             lw_clnsky_flux_up, lw_clnsky_flux_dn,
             sw_bnd_flux_up, sw_bnd_flux_dn, sw_bnd_flux_dir,
-            lw_bnd_flux_up, lw_bnd_flux_dn, tsi_scaling, logger,
-            true, true // extra_clnclrsky_diag, extra_clnsky_diag
-            // set them to true because we actually test them below
+            lw_bnd_flux_up, lw_bnd_flux_dn, tsi_scaling, logger
           );
 
     // Check values against baseline

From 09786ea6742493a5d4ddcdf8d425b1e8c4bbcd0d Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Sat, 25 Nov 2023 14:17:00 -0600
Subject: [PATCH 11/11] set lw fluxes to zero

---
 .../rrtmgp/eamxx_rrtmgp_process_interface.cpp |  4 +--
 .../rrtmgp/scream_rrtmgp_interface.cpp        | 31 +++++++++++++++++++
 .../rrtmgp/scream_rrtmgp_interface.hpp        |  2 +-
 .../src/physics/rrtmgp/tests/rrtmgp_tests.cpp |  4 ++-
 4 files changed, 37 insertions(+), 4 deletions(-)

diff --git a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
index 69427e5fa49..a345e92fc87 100644
--- a/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/eamxx_rrtmgp_process_interface.cpp
@@ -121,8 +121,8 @@ void RRTMGPRadiation::set_grids(const std::shared_ptr<const GridsManager> grids_
   }
 
   // Whether we do extra clean/clear sky calculations
-  m_extra_clnclrsky_diag = m_params.get<bool>("extra_clnclrsky_diag", true);
-  m_extra_clnsky_diag    = m_params.get<bool>("extra_clnsky_diag", true);
+  m_extra_clnclrsky_diag = m_params.get<bool>("extra_clnclrsky_diag", false);
+  m_extra_clnsky_diag    = m_params.get<bool>("extra_clnsky_diag", false);
 
   // Set computed (output) fields
   add_field<Updated >("T_mid"     , scalar3d_layout_mid, K  , grid_name, ps);
diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
index e77ab3fce68..100f7b6c5a3 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.cpp
@@ -866,6 +866,37 @@ namespace scream {
             // Problem size
             int nbnd = k_dist.get_nband();
 
+            // Associate local pointers for fluxes
+            auto &flux_up           = fluxes.flux_up;
+            auto &flux_dn           = fluxes.flux_dn;
+            auto &bnd_flux_up       = fluxes.bnd_flux_up;
+            auto &bnd_flux_dn       = fluxes.bnd_flux_dn;
+            auto &clnclrsky_flux_up = clnclrsky_fluxes.flux_up;
+            auto &clnclrsky_flux_dn = clnclrsky_fluxes.flux_dn;
+            auto &clrsky_flux_up    = clrsky_fluxes.flux_up;
+            auto &clrsky_flux_dn    = clrsky_fluxes.flux_dn;
+            auto &clnsky_flux_up    = clnsky_fluxes.flux_up;
+            auto &clnsky_flux_dn    = clnsky_fluxes.flux_dn;
+
+            // Reset fluxes to zero
+            parallel_for(
+                SimpleBounds<2>(nlay + 1, ncol), YAKL_LAMBDA(int ilev, int icol) {
+                    flux_up(icol, ilev)           = 0;
+                    flux_dn(icol, ilev)           = 0;
+                    clnclrsky_flux_up(icol, ilev) = 0;
+                    clnclrsky_flux_dn(icol, ilev) = 0;
+                    clrsky_flux_up(icol, ilev)    = 0;
+                    clrsky_flux_dn(icol, ilev)    = 0;
+                    clnsky_flux_up(icol, ilev)    = 0;
+                    clnsky_flux_dn(icol, ilev)    = 0;
+                });
+            parallel_for(
+                SimpleBounds<3>(nbnd, nlay + 1, ncol),
+                YAKL_LAMBDA(int ibnd, int ilev, int icol) {
+                    bnd_flux_up(icol, ilev, ibnd) = 0;
+                    bnd_flux_dn(icol, ilev, ibnd) = 0;
+                });
+
             // Allocate space for optical properties
             OpticalProps1scl optics;
             optics.alloc_1scl(ncol, nlay, k_dist);
diff --git a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
index d169b2de263..65e16542286 100644
--- a/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
+++ b/components/eamxx/src/physics/rrtmgp/scream_rrtmgp_interface.hpp
@@ -82,7 +82,7 @@ namespace scream {
                 real3d &lw_bnd_flux_up, real3d &lw_bnd_flux_dn,
                 const Real tsi_scaling,
                 const std::shared_ptr<spdlog::logger>& logger,
-                const bool extra_clnclrsky_diag = true, const bool extra_clnsky_diag = true);
+                const bool extra_clnclrsky_diag = false, const bool extra_clnsky_diag = false);
         /*
          * Perform any clean-up tasks
          */
diff --git a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
index 70881c736a0..51bd257d692 100644
--- a/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
+++ b/components/eamxx/src/physics/rrtmgp/tests/rrtmgp_tests.cpp
@@ -215,7 +215,9 @@ int run(int argc, char** argv) {
             lw_clrsky_flux_up, lw_clrsky_flux_dn,
             lw_clnsky_flux_up, lw_clnsky_flux_dn,
             sw_bnd_flux_up, sw_bnd_flux_dn, sw_bnd_flux_dir,
-            lw_bnd_flux_up, lw_bnd_flux_dn, tsi_scaling, logger
+            lw_bnd_flux_up, lw_bnd_flux_dn, tsi_scaling, logger,
+            true, true // extra_clnclrsky_diag, extra_clnsky_diag
+            // set them both to true because we are testing them below
           );
 
     // Check values against baseline
