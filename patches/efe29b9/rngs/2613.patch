From 7265c7c343f7839c94fadd200665791aa7176b3f Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Fri, 24 Nov 2023 17:50:24 -0600
Subject: [PATCH 01/27] initial attempt for nudging from coarse data

---
 .../eamxx_nudging_process_interface.cpp       | 104 ++++++++++++++++--
 .../eamxx_nudging_process_interface.hpp       |   9 ++
 2 files changed, 103 insertions(+), 10 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index ce2e1c98d6..45354984c7 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -12,6 +12,19 @@ Nudging::Nudging (const ekat::Comm& comm, const ekat::ParameterList& params)
   m_timescale = m_params.get<int>("nudging_timescale",0);
   m_fields_nudge = m_params.get<std::vector<std::string>>("nudging_fields");
   m_use_weights   = m_params.get<bool>("use_nudging_weights",false);
+  // Whether or not to do horizontal refine remap
+  m_refine_remap = m_params.get<bool>("do_nudging_refine_remap", false);
+  if(m_refine_remap) {
+    // If we are doing horizontal refine remap, we need to get the map file
+    m_refine_remap_file =
+        m_params.get<std::string>("nudging_refine_remap_mapfile", "");
+    // Check that the file is provided; if not, throw an error
+    // TODO: add a submit error (in xml configs)
+    EKAT_REQUIRE_MSG(m_refine_remap_file == "",
+                     "Error! Nudging::Nudging - horizontal refine "
+                     "remap is enabled but no "
+                     "nudging_refine_remap_mapfile is provided.");
+  }
   auto src_pres_type = m_params.get<std::string>("source_pressure_type","TIME_DEPENDENT_3D_PROFILE");
   if (src_pres_type=="TIME_DEPENDENT_3D_PROFILE") {
     m_src_pres_type = TIME_DEPENDENT_3D_PROFILE;
@@ -125,15 +138,64 @@ void Nudging::initialize_impl (const RunType /* run_type */)
 {
   using namespace ShortFieldTagsNames;
 
-  // Initialize the time interpolator
-  auto grid_ext = m_grid->clone(m_grid->name(), false);
+  // Initialize the refining remapper stuff at the outset,
+  // because we need to know the grid information
+  if(m_refine_remap) {
+    // For now, we are doing the horizontal interpolation last,
+    // so we use the m_grid (model physics) as the target
+    // TODO: maybe clean this up?
+    auto grid_tgt = m_grid->clone(m_grid->name(), false);
+    auto refine_remapper_p2p =
+        std::make_shared<RefiningRemapperP2P>(grid_tgt, m_refine_remap_file);
+    refine_remapper = refine_remapper_p2p;
+  }
+
+  // Set the external grids
+  // We have three types of grids with different behaviors
+  // TODO: definitely clean this up
+
+  // The grid from the remapper needs a const AbstractGrid, but
+  // the other two grids need a non-const AbstractGrid
+  // TODO: What is actually going on here anyway?
+  std::shared_ptr<const scream::AbstractGrid> grid_hxt_const;
+  std::shared_ptr<scream::AbstractGrid> grid_hxt;
+  std::shared_ptr<scream::AbstractGrid> grid_ext;
+
+  if(m_refine_remap) {
+    // If we are refine-remapping, then get grid from remapper
+    grid_hxt_const = refine_remapper->get_src_grid();
+    // Deep clone it though to get rid of "const" stuff
+    grid_hxt = grid_hxt_const->clone(grid_hxt_const->name(), false);
+  } else {
+    // If not refine-remapping, then use whatever was used before,
+    // i.e., deep clone the physics grid
+    grid_hxt = m_grid->clone(m_grid->name(), false);
+  }
+
+  // The ultimate grid is grid_ext (external grid, i.e., files)
+  grid_ext = grid_hxt->clone(grid_hxt->name(), false);
+  // grid_ext can potentially have different levels
   grid_ext->reset_num_vertical_lev(m_num_src_levs);
-  FieldLayout scalar2d_layout_mid { {LEV}, {m_num_src_levs} };
-  FieldLayout scalar3d_layout_mid { {COL,LEV}, {m_num_cols, m_num_src_levs} };
+  // Declare the layouts for the helper fields (ext --> mid)
+  FieldLayout scalar2d_layout_mid{{LEV}, {m_num_src_levs}};
+  FieldLayout scalar3d_layout_mid{{COL, LEV}, {m_num_cols, m_num_src_levs}};
+  // The penultimate grid is grid_hxt (external horiz grid, but model physics
+  // vert grid, so potentially a bit of a mess)
+  auto h_num_levs = grid_hxt->get_num_vertical_levels();
+  // Declare the layouts for the helper fields (hxt --> hid)
+  // TODO: use better names
+  FieldLayout scalar2d_layout_hid{{LEV}, {h_num_levs}};
+  FieldLayout scalar3d_layout_hid{{COL, LEV}, {m_num_cols, h_num_levs}};
+
+  // Note: below, we only need to deal with the pressure stuff on ext_grid, not
+  // hxt_grid because we are not doing vertical interpolation on the hxt_grid
+
+  // Initialize the time interpolator
   m_time_interp = util::TimeInterpolation(grid_ext, m_datafiles);
 
   constexpr int ps = SCREAM_PACK_SIZE;
-  const auto& grid_name = m_grid->name();
+  // To be extra careful, this should be the ext_grid
+  const auto& grid_name = grid_ext->name();
   if (m_src_pres_type == TIME_DEPENDENT_3D_PROFILE) {
     create_helper_field("p_mid_ext", scalar3d_layout_mid, grid_name, ps);
     auto pmid_ext = get_helper_field("p_mid_ext");
@@ -156,14 +218,19 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     src_input.finalize();
     pmid_ext.sync_to_dev();
   }
+
+  // To create helper fields for later; we do both hxt and ext...
   for (auto name : m_fields_nudge) {
     std::string name_ext = name + "_ext";
+    std::string name_hxt = name + "_hxt";
     // Helper fields that will temporarily store the target state, which can then
     // be used to back out a nudging tendency
     auto field  = get_field_out_wrap(name);
     auto layout = field.get_header().get_identifier().get_layout();
     create_helper_field(name,     layout,              grid_name, ps);
     create_helper_field(name_ext, scalar3d_layout_mid, grid_name, ps);
+    create_helper_field(name_hxt, scalar3d_layout_hid, grid_name, ps);
+    // No need to follow with hxt because we are not reading it externally
     auto field_ext = get_helper_field(name_ext);
     m_time_interp.add_field(field_ext.alias(name),true);
   }
@@ -210,10 +277,12 @@ void Nudging::run_impl (const double dt)
   }
 
   for (auto name : m_fields_nudge) {
-    auto atm_state_field = get_field_out_wrap(name);
-    auto int_state_field = get_helper_field(name);
-    auto ext_state_field = get_helper_field(name+"_ext");
+    auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
+    auto int_state_field = get_helper_field(name);        // int horiz, int vert
+    auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
+    auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
     auto ext_state_view  = ext_state_field.get_view<mPack**>();
+    auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
     auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
     auto int_state_view  = int_state_field.get_view<mPack**>();
     auto int_mask_view = m_buffer.int_mask_view;
@@ -268,11 +337,12 @@ void Nudging::run_impl (const double dt)
     });
 
     // Vertical Interpolation onto atmosphere state pressure levels
+    // Note that we are going from ext to hxt here
     if (m_src_pres_type == TIME_DEPENDENT_3D_PROFILE) {
       perform_vertical_interpolation<Real,1,2>(p_mid_ext_p,
                                                p_mid_v,
                                                ext_state_view,
-                                               int_state_view,
+                                               hxt_state_view,
                                                int_mask_view,
                                                m_num_src_levs,
                                                m_num_levs);
@@ -280,12 +350,26 @@ void Nudging::run_impl (const double dt)
       perform_vertical_interpolation<Real,1,2>(p_mid_ext_1d,
                                                p_mid_v,
                                                ext_state_view,
-                                               int_state_view,
+                                               hxt_state_view,
                                                int_mask_view,
                                                m_num_src_levs,
                                                m_num_levs);
     }
 
+    // Refine remap onto target atmosphere state horiz grid ("int")
+    // Note that we are going from hxt to int here
+    if(m_refine_remap) {
+      // We have to register the fields
+      refine_remapper->registration_begins();
+      refine_remapper->register_field(hxt_state_field, int_state_field);
+      refine_remapper->registration_ends();
+      // Call the remapper
+      refine_remapper->remap(true);
+    } else {
+      // No horizontal interpolation, just copy the data
+      Kokkos::deep_copy(int_state_view, hxt_state_view);
+    }
+
     // Check that none of the nudging targets are masked, if they are, set value to
     // nearest unmasked value above.
     // NOTE: We use an algorithm whichs scans from TOM to the surface.
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
index 6f97b21c1f..dd0718042a 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
@@ -13,6 +13,7 @@
 #include "share/grid/point_grid.hpp"
 #include "share/util/scream_vertical_interpolation.hpp"
 #include "share/util/scream_time_stamp.hpp"
+#include "share/grid/remap/refining_remapper_p2p.hpp"
 
 #include <string>
 
@@ -132,6 +133,14 @@ class Nudging : public AtmosphereProcess
 
   std::vector<std::string> m_fields_nudge;
 
+  /* Nudge from coarse data */
+  // if true, remap coarse data to fine grid
+  bool m_refine_remap;
+  // file containing coarse data mapping
+  std::string m_refine_remap_file;
+  // (refining) remapper object
+  std::shared_ptr<scream::RefiningRemapperP2P> refine_remapper;
+
   util::TimeInterpolation m_time_interp;
 
   Buffer m_buffer;

From 85488aa9c8ecf6340c2545d7cf9df64e0c6b3e01 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Mon, 27 Nov 2023 16:39:26 -0600
Subject: [PATCH 02/27] fix logic of intermediate grid

---
 .../eamxx_nudging_process_interface.cpp       | 29 ++++++++++---------
 1 file changed, 15 insertions(+), 14 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 45354984c7..f0f91087c8 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -157,35 +157,36 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // The grid from the remapper needs a const AbstractGrid, but
   // the other two grids need a non-const AbstractGrid
   // TODO: What is actually going on here anyway?
-  std::shared_ptr<const scream::AbstractGrid> grid_hxt_const;
-  std::shared_ptr<scream::AbstractGrid> grid_hxt;
+  std::shared_ptr<const scream::AbstractGrid> grid_ext_const;
   std::shared_ptr<scream::AbstractGrid> grid_ext;
+  std::shared_ptr<scream::AbstractGrid> grid_hxt;
 
   if(m_refine_remap) {
     // If we are refine-remapping, then get grid from remapper
-    grid_hxt_const = refine_remapper->get_src_grid();
+    grid_ext_const = refine_remapper->get_src_grid();
     // Deep clone it though to get rid of "const" stuff
-    grid_hxt = grid_hxt_const->clone(grid_hxt_const->name(), false);
+    grid_ext = grid_ext_const->clone(grid_ext_const->name(), false);
   } else {
     // If not refine-remapping, then use whatever was used before,
     // i.e., deep clone the physics grid
-    grid_hxt = m_grid->clone(m_grid->name(), false);
+    grid_ext = m_grid->clone(m_grid->name(), false);
   }
 
-  // The ultimate grid is grid_ext (external grid, i.e., files)
-  grid_ext = grid_hxt->clone(grid_hxt->name(), false);
-  // grid_ext can potentially have different levels
+  // The ultimate grid is grid_ext (external grid, i.e., files),
+  // so, grid_ext can potentially have different levels
   grid_ext->reset_num_vertical_lev(m_num_src_levs);
   // Declare the layouts for the helper fields (ext --> mid)
-  FieldLayout scalar2d_layout_mid{{LEV}, {m_num_src_levs}};
-  FieldLayout scalar3d_layout_mid{{COL, LEV}, {m_num_cols, m_num_src_levs}};
+  FieldLayout scalar2d_layout_mid { {LEV}, {m_num_src_levs} };
+  FieldLayout scalar3d_layout_mid { {COL,LEV}, {m_num_cols, m_num_src_levs} };
   // The penultimate grid is grid_hxt (external horiz grid, but model physics
   // vert grid, so potentially a bit of a mess)
-  auto h_num_levs = grid_hxt->get_num_vertical_levels();
+  grid_hxt = grid_ext->clone(grid_ext->name(), false);
+  auto h_num_levs = m_num_levs;
+  grid_hxt->reset_num_vertical_lev(h_num_levs);
   // Declare the layouts for the helper fields (hxt --> hid)
   // TODO: use better names
-  FieldLayout scalar2d_layout_hid{{LEV}, {h_num_levs}};
-  FieldLayout scalar3d_layout_hid{{COL, LEV}, {m_num_cols, h_num_levs}};
+  FieldLayout scalar2d_layout_hid { {LEV}, {h_num_levs}};
+  FieldLayout scalar3d_layout_hid { {COL,LEV}, {m_num_cols, h_num_levs} };
 
   // Note: below, we only need to deal with the pressure stuff on ext_grid, not
   // hxt_grid because we are not doing vertical interpolation on the hxt_grid
@@ -356,7 +357,7 @@ void Nudging::run_impl (const double dt)
                                                m_num_levs);
     }
 
-    // Refine remap onto target atmosphere state horiz grid ("int")
+    // Refine-remap onto target atmosphere state horiz grid ("int")
     // Note that we are going from hxt to int here
     if(m_refine_remap) {
       // We have to register the fields

From 462317a8f1f836a37759c2af14eae95fce7dfee9 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Mon, 27 Nov 2023 22:31:31 -0600
Subject: [PATCH 03/27] fix namelist and grid names

---
 .../cime_config/namelist_defaults_scream.xml  |  2 ++
 .../eamxx_nudging_process_interface.cpp       | 19 +++++++++++--------
 2 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/components/eamxx/cime_config/namelist_defaults_scream.xml b/components/eamxx/cime_config/namelist_defaults_scream.xml
index be20d5a4e3..8af5b39a92 100644
--- a/components/eamxx/cime_config/namelist_defaults_scream.xml
+++ b/components/eamxx/cime_config/namelist_defaults_scream.xml
@@ -240,6 +240,8 @@ be lost if SCREAM_HACK_XML is not enabled.
     STATIC_1D_VERTICAL_PROFILE: The dataset uses a fixed in time single pressure profile, variable name 'p_lev' with dimension (nlev).">TIME_DEPENDENT_3D_PROFILE</source_pressure_type>
       <source_pressure_file type="string" doc="If STATIC_1D_VERTICAL_PROFILE, this is an optional arg to point to a file with the source pressure levels defined.  
     Default is to look for p_levs in the first nudging_filename file"/>
+      <do_nudging_refine_remap type="logical" doc="Flag for whether to remap nudging fields to the physics grid">false</do_nudging_refine_remap>
+      <nudging_refine_remap_mapfile type="string" doc="File containing the remapping weights for nudging fields to the physics grid">"no-file-given"</nudging_refine_remap_mapfile>
     </nudging>
 
     <!-- ML correction -->
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index f0f91087c8..f0de790d42 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -17,10 +17,10 @@ Nudging::Nudging (const ekat::Comm& comm, const ekat::ParameterList& params)
   if(m_refine_remap) {
     // If we are doing horizontal refine remap, we need to get the map file
     m_refine_remap_file =
-        m_params.get<std::string>("nudging_refine_remap_mapfile", "");
+        m_params.get<std::string>("nudging_refine_remap_mapfile", "no-file-given");
     // Check that the file is provided; if not, throw an error
     // TODO: add a submit error (in xml configs)
-    EKAT_REQUIRE_MSG(m_refine_remap_file == "",
+    EKAT_REQUIRE_MSG(m_refine_remap_file != "no-file-given",
                      "Error! Nudging::Nudging - horizontal refine "
                      "remap is enabled but no "
                      "nudging_refine_remap_mapfile is provided.");
@@ -196,9 +196,9 @@ void Nudging::initialize_impl (const RunType /* run_type */)
 
   constexpr int ps = SCREAM_PACK_SIZE;
   // To be extra careful, this should be the ext_grid
-  const auto& grid_name = grid_ext->name();
+  const auto& grid_ext_name = grid_ext->name();
   if (m_src_pres_type == TIME_DEPENDENT_3D_PROFILE) {
-    create_helper_field("p_mid_ext", scalar3d_layout_mid, grid_name, ps);
+    create_helper_field("p_mid_ext", scalar3d_layout_mid, grid_ext_name, ps);
     auto pmid_ext = get_helper_field("p_mid_ext");
     m_time_interp.add_field(pmid_ext.alias("p_mid"),true);
   } else if (m_src_pres_type == STATIC_1D_VERTICAL_PROFILE) {
@@ -208,7 +208,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     in_params.set("Skip_Grid_Checks",true);  // We need to skip grid checks because multiple ranks may want the same column of source data.
     std::map<std::string,view_1d_host<Real>> host_views;
     std::map<std::string,FieldLayout>  layouts;
-    create_helper_field("p_mid_ext", scalar2d_layout_mid, grid_name, ps);
+    create_helper_field("p_mid_ext", scalar2d_layout_mid, grid_ext_name, ps);
     auto pmid_ext = get_helper_field("p_mid_ext");
     auto pmid_ext_v = pmid_ext.get_view<Real*,Host>();
     in_params.set<std::vector<std::string>>("Field Names",{"p_levs"});
@@ -226,11 +226,14 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     std::string name_hxt = name + "_hxt";
     // Helper fields that will temporarily store the target state, which can then
     // be used to back out a nudging tendency
+    auto grid_int_name = m_grid->name();
+    auto grid_ext_name = grid_ext->name();
+    auto grid_hxt_name = grid_hxt->name();
     auto field  = get_field_out_wrap(name);
     auto layout = field.get_header().get_identifier().get_layout();
-    create_helper_field(name,     layout,              grid_name, ps);
-    create_helper_field(name_ext, scalar3d_layout_mid, grid_name, ps);
-    create_helper_field(name_hxt, scalar3d_layout_hid, grid_name, ps);
+    create_helper_field(name,     layout,              grid_int_name, ps);
+    create_helper_field(name_ext, scalar3d_layout_mid, grid_ext_name, ps);
+    create_helper_field(name_hxt, scalar3d_layout_hid, grid_hxt_name, ps);
     // No need to follow with hxt because we are not reading it externally
     auto field_ext = get_helper_field(name_ext);
     m_time_interp.add_field(field_ext.alias(name),true);

From 9dfe08a6dbb910046d10610f45692cd24af79a63 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Mon, 27 Nov 2023 22:47:31 -0600
Subject: [PATCH 04/27] fix bug caused by logicals left unset in namelist

---
 components/eamxx/cime_config/namelist_defaults_scream.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/components/eamxx/cime_config/namelist_defaults_scream.xml b/components/eamxx/cime_config/namelist_defaults_scream.xml
index 8af5b39a92..783d7faf05 100644
--- a/components/eamxx/cime_config/namelist_defaults_scream.xml
+++ b/components/eamxx/cime_config/namelist_defaults_scream.xml
@@ -231,7 +231,7 @@ be lost if SCREAM_HACK_XML is not enabled.
       <nudging_filename type="array(string)"/>
       <nudging_fields type="array(string)" doc="List of fields to be nudged.  Note, syntax of 'A:B' represents nudging field A with data from field B in files, syntax of 'A' assumes that nudging file has the same variables name as EAMxx"/>
       <nudging_timescale type="integer" doc="Timescale to apply nudging tendencies, 0: full replacement, >0: actual timescale">0</nudging_timescale>
-      <use_nudging_weights type="logical" doc="Flag for nudging weights option"/>
+      <use_nudging_weights type="logical" doc="Flag for nudging weights option">false</use_nudging_weights>
       <nudging_weights_file type="string" doc="weights that relax the nudging fields update"/>
       <source_pressure_type type="string" 
 	                    valid_values="TIME_DEPENDENT_3D_PROFILE,STATIC_1D_VERTICAL_PROFILE"

From 8737855aa0bbc3c9ea1df505477d0cd5a942bf6e Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Mon, 27 Nov 2023 22:59:06 -0600
Subject: [PATCH 05/27] define grid_name for the use_weights guard

---
 .../src/physics/nudging/eamxx_nudging_process_interface.cpp      | 1 +
 1 file changed, 1 insertion(+)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index f0de790d42..223d2506d7 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -245,6 +245,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // do the interpolation.
   if (m_use_weights)
   {
+    auto grid_name = m_grid->name();
     FieldLayout scalar3d_layout_grid { {COL,LEV}, {m_num_cols, m_num_levs} };	  
     create_helper_field("nudging_weights", scalar3d_layout_grid, grid_name, ps);
     std::vector<Field> fields;

From 4dae3baa2f6e6e409f384dd6b68b07c2da1a78b2 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Tue, 28 Nov 2023 14:44:55 -0600
Subject: [PATCH 06/27] separate the remapper registration into a different
 for-loop

---
 .../eamxx_nudging_process_interface.cpp       | 37 +++++++++++++------
 1 file changed, 25 insertions(+), 12 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 223d2506d7..773940d3c3 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -281,15 +281,32 @@ void Nudging::run_impl (const double dt)
     p_mid_ext_1d   = get_helper_field("p_mid_ext").get_view<mPack*>();
   }
 
+  // Open the registration!
+  if(m_refine_remap) {
+    refine_remapper->registration_begins();
+  }
+
+  if(m_refine_remap) {
+    // Loop over the nudged fields
+    for (auto name : m_fields_nudge) {
+      auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
+      auto int_state_field = get_helper_field(name);        // int horiz, int vert
+      auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
+      auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
+      auto ext_state_view  = ext_state_field.get_view<mPack**>();
+      auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
+      auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
+      auto int_state_view  = int_state_field.get_view<mPack**>();
+      refine_remapper->register_field(hxt_state_field, int_state_field);
+    }
+  }
+  // Close the registration!
+  if(m_refine_remap) {
+    refine_remapper->registration_ends();
+  }
+
+  // Loop over the nudged fields
   for (auto name : m_fields_nudge) {
-    auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
-    auto int_state_field = get_helper_field(name);        // int horiz, int vert
-    auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
-    auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
-    auto ext_state_view  = ext_state_field.get_view<mPack**>();
-    auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
-    auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
-    auto int_state_view  = int_state_field.get_view<mPack**>();
     auto int_mask_view = m_buffer.int_mask_view;
     // Masked values in the source data can lead to strange behavior in the vertical interpolation.
     // We pre-process the data and map any masked values (sometimes called "filled" values) to the
@@ -364,10 +381,6 @@ void Nudging::run_impl (const double dt)
     // Refine-remap onto target atmosphere state horiz grid ("int")
     // Note that we are going from hxt to int here
     if(m_refine_remap) {
-      // We have to register the fields
-      refine_remapper->registration_begins();
-      refine_remapper->register_field(hxt_state_field, int_state_field);
-      refine_remapper->registration_ends();
       // Call the remapper
       refine_remapper->remap(true);
     } else {

From c2df3b89a1e1c3f18e6e4b344f7e8b13df87a97d Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Tue, 28 Nov 2023 15:07:21 -0600
Subject: [PATCH 07/27] add printing hyperslaps

---
 .../nudging/eamxx_nudging_process_interface.cpp  | 16 ++++++++++++----
 1 file changed, 12 insertions(+), 4 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 773940d3c3..c0a49ccb29 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -1,5 +1,6 @@
 #include "eamxx_nudging_process_interface.hpp"
 #include "share/util/scream_universal_constants.hpp"
+#include "share/field/field_utils.hpp"
 
 namespace scream
 {
@@ -293,10 +294,6 @@ void Nudging::run_impl (const double dt)
       auto int_state_field = get_helper_field(name);        // int horiz, int vert
       auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
       auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
-      auto ext_state_view  = ext_state_field.get_view<mPack**>();
-      auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
-      auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
-      auto int_state_view  = int_state_field.get_view<mPack**>();
       refine_remapper->register_field(hxt_state_field, int_state_field);
     }
   }
@@ -307,6 +304,14 @@ void Nudging::run_impl (const double dt)
 
   // Loop over the nudged fields
   for (auto name : m_fields_nudge) {
+    auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
+    auto int_state_field = get_helper_field(name);        // int horiz, int vert
+    auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
+    auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
+    auto ext_state_view  = ext_state_field.get_view<mPack**>();
+    auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
+    auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
+    auto int_state_view  = int_state_field.get_view<mPack**>();
     auto int_mask_view = m_buffer.int_mask_view;
     // Masked values in the source data can lead to strange behavior in the vertical interpolation.
     // We pre-process the data and map any masked values (sometimes called "filled" values) to the
@@ -382,6 +387,9 @@ void Nudging::run_impl (const double dt)
     // Note that we are going from hxt to int here
     if(m_refine_remap) {
       // Call the remapper
+      print_field_hyperslab (ext_state_field);
+      print_field_hyperslab (hxt_state_field);
+      print_field_hyperslab (int_state_field);
       refine_remapper->remap(true);
     } else {
       // No horizontal interpolation, just copy the data

From 70cc88ed5fb6ebf6164cdf3395dd252c5e88c7d8 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Tue, 28 Nov 2023 15:57:13 -0600
Subject: [PATCH 08/27] move horiz remap outside for-loop

---
 .../eamxx_nudging_process_interface.cpp       | 99 ++++++++++++-------
 1 file changed, 61 insertions(+), 38 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index c0a49ccb29..e13d4853f5 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -238,6 +238,8 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     // No need to follow with hxt because we are not reading it externally
     auto field_ext = get_helper_field(name_ext);
     m_time_interp.add_field(field_ext.alias(name),true);
+    // auto field_hxt = get_helper_field(name_hxt);
+    // m_time_interp.add_field(field_hxt.alias(name_hxt),true);
   }
   m_time_interp.initialize_data_from_files();
 
@@ -282,26 +284,6 @@ void Nudging::run_impl (const double dt)
     p_mid_ext_1d   = get_helper_field("p_mid_ext").get_view<mPack*>();
   }
 
-  // Open the registration!
-  if(m_refine_remap) {
-    refine_remapper->registration_begins();
-  }
-
-  if(m_refine_remap) {
-    // Loop over the nudged fields
-    for (auto name : m_fields_nudge) {
-      auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
-      auto int_state_field = get_helper_field(name);        // int horiz, int vert
-      auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
-      auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
-      refine_remapper->register_field(hxt_state_field, int_state_field);
-    }
-  }
-  // Close the registration!
-  if(m_refine_remap) {
-    refine_remapper->registration_ends();
-  }
-
   // Loop over the nudged fields
   for (auto name : m_fields_nudge) {
     auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
@@ -383,19 +365,6 @@ void Nudging::run_impl (const double dt)
                                                m_num_levs);
     }
 
-    // Refine-remap onto target atmosphere state horiz grid ("int")
-    // Note that we are going from hxt to int here
-    if(m_refine_remap) {
-      // Call the remapper
-      print_field_hyperslab (ext_state_field);
-      print_field_hyperslab (hxt_state_field);
-      print_field_hyperslab (int_state_field);
-      refine_remapper->remap(true);
-    } else {
-      // No horizontal interpolation, just copy the data
-      Kokkos::deep_copy(int_state_view, hxt_state_view);
-    }
-
     // Check that none of the nudging targets are masked, if they are, set value to
     // nearest unmasked value above.
     // NOTE: We use an algorithm whichs scans from TOM to the surface.
@@ -411,7 +380,7 @@ void Nudging::run_impl (const double dt)
        	       KOKKOS_LAMBDA(MemberType const& team) {
       const int icol = team.league_rank();
       auto int_mask_view_1d  = ekat::subview(int_mask_view,icol);
-      auto int_state_view_1d = ekat::subview(int_state_view,icol);
+      auto hxt_state_view_1d = ekat::subview(hxt_state_view,icol);
       Real fill_value;
       int  fill_idx = -1;
       // Scan top to surf and backfill all values near TOM that are masked.
@@ -420,12 +389,12 @@ void Nudging::run_impl (const double dt)
 	const auto iidx  = kk % mPack::n;
         // Check if this index is masked
 	if (!int_mask_view_1d(ipack)[iidx]) {
-	  fill_value = int_state_view_1d(ipack)[iidx];
+	  fill_value = hxt_state_view_1d(ipack)[iidx];
 	  fill_idx = kk;
 	  for (int jj=0; jj<fill_idx; ++jj) {
             const auto jpack = jj / mPack::n;
 	    const auto jidx  = jj % mPack::n;
-	    int_state_view_1d(jpack)[jidx] = fill_value;
+	    hxt_state_view_1d(jpack)[jidx] = fill_value;
 	  }
 	  break;
 	}
@@ -437,13 +406,67 @@ void Nudging::run_impl (const double dt)
 	const auto iidx  = kk % mPack::n;
         // Check if this index is masked
 	if (!int_mask_view_1d(ipack)[iidx]) {
-	  fill_value = int_state_view_1d(ipack)[iidx];
+	  fill_value = hxt_state_view_1d(ipack)[iidx];
 	} else {
-	  int_state_view_1d(ipack)[iidx] = fill_value;
+	  hxt_state_view_1d(ipack)[iidx] = fill_value;
 	}
       }
     });
 
+  }
+
+  // Open the registration!
+  if(m_refine_remap) {
+    refine_remapper->registration_begins();
+  }
+
+  if(m_refine_remap) {
+    // Loop over the nudged fields
+    for (auto name : m_fields_nudge) {
+      auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
+      auto int_state_field = get_helper_field(name);        // int horiz, int vert
+      auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
+      auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
+      refine_remapper->register_field(hxt_state_field, int_state_field);
+    }
+  }
+  // Close the registration!
+  if(m_refine_remap) {
+    refine_remapper->registration_ends();
+  }
+
+  // Refine-remap onto target atmosphere state horiz grid ("int")
+  // Note that we are going from hxt to int here
+  if(m_refine_remap) {
+    // Call the remapper
+    // print_field_hyperslab (ext_state_field);
+    // print_field_hyperslab (hxt_state_field);
+    // print_field_hyperslab (int_state_field);
+    refine_remapper->remap(true);
+  } else {
+    for (auto name : m_fields_nudge) {
+      auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
+      auto int_state_field = get_helper_field(name);        // int horiz, int vert
+      auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
+      auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
+      auto ext_state_view  = ext_state_field.get_view<mPack**>();
+      auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
+      auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
+      auto int_state_view  = int_state_field.get_view<mPack**>();
+      // No horizontal interpolation, just copy the data
+      Kokkos::deep_copy(int_state_view, hxt_state_view);
+    }
+  }
+
+  for (auto name : m_fields_nudge) {
+    auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
+    auto int_state_field = get_helper_field(name);        // int horiz, int vert
+    auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
+    auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
+    auto ext_state_view  = ext_state_field.get_view<mPack**>();
+    auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
+    auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
+    auto int_state_view  = int_state_field.get_view<mPack**>();
     // Apply the nudging tendencies to the ATM state
     if (m_timescale <= 0) {
       // We do direct replacement

From e3b28d10174da0d48cfc4118b9ef6d3c365b3a4a Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Tue, 28 Nov 2023 16:09:50 -0600
Subject: [PATCH 09/27] move registration to init_impl

---
 .../eamxx_nudging_process_interface.cpp       | 35 ++++++++-----------
 1 file changed, 15 insertions(+), 20 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index e13d4853f5..bc263225e4 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -221,6 +221,11 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     pmid_ext.sync_to_dev();
   }
 
+  // Open the registration!
+  if(m_refine_remap) {
+    refine_remapper->registration_begins();
+  }
+
   // To create helper fields for later; we do both hxt and ext...
   for (auto name : m_fields_nudge) {
     std::string name_ext = name + "_ext";
@@ -237,12 +242,22 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     create_helper_field(name_hxt, scalar3d_layout_hid, grid_hxt_name, ps);
     // No need to follow with hxt because we are not reading it externally
     auto field_ext = get_helper_field(name_ext);
+    if(m_refine_remap) {
+      auto field_hxt = get_helper_field(name_hxt);
+      auto field_int = get_helper_field(name);
+      refine_remapper->register_field(field_hxt, field_int);
+    }
     m_time_interp.add_field(field_ext.alias(name),true);
     // auto field_hxt = get_helper_field(name_hxt);
     // m_time_interp.add_field(field_hxt.alias(name_hxt),true);
   }
   m_time_interp.initialize_data_from_files();
 
+  // Close the registration!
+  if(m_refine_remap) {
+    refine_remapper->registration_ends();
+  }
+
   // load nudging weights from file
   // NOTE: the regional nudging use the same grid as the run, no need to
   // do the interpolation.
@@ -415,26 +430,6 @@ void Nudging::run_impl (const double dt)
 
   }
 
-  // Open the registration!
-  if(m_refine_remap) {
-    refine_remapper->registration_begins();
-  }
-
-  if(m_refine_remap) {
-    // Loop over the nudged fields
-    for (auto name : m_fields_nudge) {
-      auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
-      auto int_state_field = get_helper_field(name);        // int horiz, int vert
-      auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
-      auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
-      refine_remapper->register_field(hxt_state_field, int_state_field);
-    }
-  }
-  // Close the registration!
-  if(m_refine_remap) {
-    refine_remapper->registration_ends();
-  }
-
   // Refine-remap onto target atmosphere state horiz grid ("int")
   // Note that we are going from hxt to int here
   if(m_refine_remap) {

From 7b86cb4ab20aabcb3efa911e58077221f265ca09 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Wed, 29 Nov 2023 14:41:12 -0600
Subject: [PATCH 10/27] restructure code based on luca's comments

---
 .../eamxx_nudging_process_interface.cpp       | 148 +++++++-----------
 .../eamxx_nudging_process_interface.hpp       |  15 +-
 2 files changed, 65 insertions(+), 98 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index bc263225e4..a806c2c16b 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -1,6 +1,5 @@
 #include "eamxx_nudging_process_interface.hpp"
 #include "share/util/scream_universal_constants.hpp"
-#include "share/field/field_utils.hpp"
 
 namespace scream
 {
@@ -17,8 +16,8 @@ Nudging::Nudging (const ekat::Comm& comm, const ekat::ParameterList& params)
   m_refine_remap = m_params.get<bool>("do_nudging_refine_remap", false);
   if(m_refine_remap) {
     // If we are doing horizontal refine remap, we need to get the map file
-    m_refine_remap_file =
-        m_params.get<std::string>("nudging_refine_remap_mapfile", "no-file-given");
+    m_refine_remap_file = m_params.get<std::string>(
+        "nudging_refine_remap_mapfile", "no-file-given");
     // Check that the file is provided; if not, throw an error
     // TODO: add a submit error (in xml configs)
     EKAT_REQUIRE_MSG(m_refine_remap_file != "no-file-given",
@@ -140,57 +139,47 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   using namespace ShortFieldTagsNames;
 
   // Initialize the refining remapper stuff at the outset,
-  // because we need to know the grid information
-  if(m_refine_remap) {
-    // For now, we are doing the horizontal interpolation last,
-    // so we use the m_grid (model physics) as the target
-    // TODO: maybe clean this up?
-    auto grid_tgt = m_grid->clone(m_grid->name(), false);
-    auto refine_remapper_p2p =
-        std::make_shared<RefiningRemapperP2P>(grid_tgt, m_refine_remap_file);
-    refine_remapper = refine_remapper_p2p;
-  }
-
-  // Set the external grids
-  // We have three types of grids with different behaviors
-  // TODO: definitely clean this up
-
-  // The grid from the remapper needs a const AbstractGrid, but
-  // the other two grids need a non-const AbstractGrid
-  // TODO: What is actually going on here anyway?
+  // because we need to know the grid information.
+  // For now, we are doing the horizontal interpolation last,
+  // so we use the m_grid (model physics) as the target grid
+  grid_int = m_grid->clone(m_grid->name(), false);
+  // We also need a temporary grid for the external grid
   std::shared_ptr<const scream::AbstractGrid> grid_ext_const;
-  std::shared_ptr<scream::AbstractGrid> grid_ext;
-  std::shared_ptr<scream::AbstractGrid> grid_hxt;
-
   if(m_refine_remap) {
+    // P2P remapper
+    m_refine_remapper =
+        std::make_shared<RefiningRemapperP2P>(grid_int, m_refine_remap_file);
     // If we are refine-remapping, then get grid from remapper
-    grid_ext_const = refine_remapper->get_src_grid();
+    grid_ext_const = m_refine_remapper->get_src_grid();
     // Deep clone it though to get rid of "const" stuff
     grid_ext = grid_ext_const->clone(grid_ext_const->name(), false);
+    // The first grid is grid_ext (external grid, i.e., files),
+    // so, grid_ext can potentially have different levels
+    grid_ext->reset_num_vertical_lev(m_num_src_levs);
+    // The second grid is grid_hxt (external horiz grid, but model physics
+    // vert grid, so potentially a bit of a mess)
+    grid_hxt = grid_ext->clone(grid_ext->name(), false);
+    grid_hxt->reset_num_vertical_lev(m_num_levs);
   } else {
+    // DoNothingRemapper
     // If not refine-remapping, then use whatever was used before,
     // i.e., deep clone the physics grid
     grid_ext = m_grid->clone(m_grid->name(), false);
+    // The first grid is grid_ext (external grid, i.e., files),
+    // so, grid_ext can potentially have different levels
+    grid_ext->reset_num_vertical_lev(m_num_src_levs);
+    // The second grid is grid_hxt (external horiz grid, but model physics
+    // vert grid, so potentially a bit of a mess)
+    grid_hxt = grid_ext->clone(grid_ext->name(), false);
+    grid_hxt->reset_num_vertical_lev(m_num_levs);
+    m_refine_remapper = std::make_shared<DoNothingRemapper>(grid_hxt, grid_int);
   }
-
-  // The ultimate grid is grid_ext (external grid, i.e., files),
-  // so, grid_ext can potentially have different levels
-  grid_ext->reset_num_vertical_lev(m_num_src_levs);
   // Declare the layouts for the helper fields (ext --> mid)
   FieldLayout scalar2d_layout_mid { {LEV}, {m_num_src_levs} };
   FieldLayout scalar3d_layout_mid { {COL,LEV}, {m_num_cols, m_num_src_levs} };
-  // The penultimate grid is grid_hxt (external horiz grid, but model physics
-  // vert grid, so potentially a bit of a mess)
-  grid_hxt = grid_ext->clone(grid_ext->name(), false);
-  auto h_num_levs = m_num_levs;
-  grid_hxt->reset_num_vertical_lev(h_num_levs);
   // Declare the layouts for the helper fields (hxt --> hid)
-  // TODO: use better names
-  FieldLayout scalar2d_layout_hid { {LEV}, {h_num_levs}};
-  FieldLayout scalar3d_layout_hid { {COL,LEV}, {m_num_cols, h_num_levs} };
-
-  // Note: below, we only need to deal with the pressure stuff on ext_grid, not
-  // hxt_grid because we are not doing vertical interpolation on the hxt_grid
+  FieldLayout scalar2d_layout_hid { {LEV}, {m_num_levs}};
+  FieldLayout scalar3d_layout_hid { {COL,LEV}, {m_num_cols, m_num_levs} };
 
   // Initialize the time interpolator
   m_time_interp = util::TimeInterpolation(grid_ext, m_datafiles);
@@ -199,8 +188,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // To be extra careful, this should be the ext_grid
   const auto& grid_ext_name = grid_ext->name();
   if (m_src_pres_type == TIME_DEPENDENT_3D_PROFILE) {
-    create_helper_field("p_mid_ext", scalar3d_layout_mid, grid_ext_name, ps);
-    auto pmid_ext = get_helper_field("p_mid_ext");
+    auto pmid_ext = create_helper_field("p_mid_ext", scalar3d_layout_mid, grid_ext_name, ps);
     m_time_interp.add_field(pmid_ext.alias("p_mid"),true);
   } else if (m_src_pres_type == STATIC_1D_VERTICAL_PROFILE) {
     // Load p_levs from source data file
@@ -209,8 +197,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     in_params.set("Skip_Grid_Checks",true);  // We need to skip grid checks because multiple ranks may want the same column of source data.
     std::map<std::string,view_1d_host<Real>> host_views;
     std::map<std::string,FieldLayout>  layouts;
-    create_helper_field("p_mid_ext", scalar2d_layout_mid, grid_ext_name, ps);
-    auto pmid_ext = get_helper_field("p_mid_ext");
+    auto pmid_ext = create_helper_field("p_mid_ext", scalar2d_layout_mid, grid_ext_name, ps);
     auto pmid_ext_v = pmid_ext.get_view<Real*,Host>();
     in_params.set<std::vector<std::string>>("Field Names",{"p_levs"});
     host_views["p_levs"] = pmid_ext_v;
@@ -222,9 +209,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   }
 
   // Open the registration!
-  if(m_refine_remap) {
-    refine_remapper->registration_begins();
-  }
+  m_refine_remapper->registration_begins();
 
   // To create helper fields for later; we do both hxt and ext...
   for (auto name : m_fields_nudge) {
@@ -237,26 +222,27 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     auto grid_hxt_name = grid_hxt->name();
     auto field  = get_field_out_wrap(name);
     auto layout = field.get_header().get_identifier().get_layout();
-    create_helper_field(name,     layout,              grid_int_name, ps);
-    create_helper_field(name_ext, scalar3d_layout_mid, grid_ext_name, ps);
-    create_helper_field(name_hxt, scalar3d_layout_hid, grid_hxt_name, ps);
-    // No need to follow with hxt because we are not reading it externally
-    auto field_ext = get_helper_field(name_ext);
+    auto field_ext =
+        create_helper_field(name_ext, scalar3d_layout_mid, grid_ext_name, ps);
+    auto field_hxt =
+        create_helper_field(name_hxt, scalar3d_layout_hid, grid_hxt_name, ps);
+    Field field_int;
     if(m_refine_remap) {
-      auto field_hxt = get_helper_field(name_hxt);
-      auto field_int = get_helper_field(name);
-      refine_remapper->register_field(field_hxt, field_int);
+      field_int = create_helper_field(name, layout, grid_int_name, ps);
+    } else {
+      field_int             = field_hxt.alias(name);
+      m_helper_fields[name] = field_int;
     }
-    m_time_interp.add_field(field_ext.alias(name),true);
-    // auto field_hxt = get_helper_field(name_hxt);
-    // m_time_interp.add_field(field_hxt.alias(name_hxt),true);
+
+    // Register the fields with the remapper
+    m_refine_remapper->register_field(field_hxt, field_int);
+    // Add them to time interpolator
+    m_time_interp.add_field(field_ext.alias(name), true);
   }
   m_time_interp.initialize_data_from_files();
 
   // Close the registration!
-  if(m_refine_remap) {
-    refine_remapper->registration_ends();
-  }
+  m_refine_remapper->registration_ends();
 
   // load nudging weights from file
   // NOTE: the regional nudging use the same grid as the run, no need to
@@ -264,10 +250,10 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   if (m_use_weights)
   {
     auto grid_name = m_grid->name();
-    FieldLayout scalar3d_layout_grid { {COL,LEV}, {m_num_cols, m_num_levs} };	  
-    create_helper_field("nudging_weights", scalar3d_layout_grid, grid_name, ps);
+    FieldLayout scalar3d_layout_grid { {COL,LEV}, {m_num_cols, m_num_levs} };
+    auto nudging_weights = create_helper_field(
+        "nudging_weights", scalar3d_layout_grid, grid_name, ps);
     std::vector<Field> fields;
-    auto nudging_weights = get_helper_field("nudging_weights");
     fields.push_back(nudging_weights);
     AtmosphereInput src_weights_input(m_weights_file, grid_ext, fields);
     src_weights_input.read_variables();
@@ -432,34 +418,11 @@ void Nudging::run_impl (const double dt)
 
   // Refine-remap onto target atmosphere state horiz grid ("int")
   // Note that we are going from hxt to int here
-  if(m_refine_remap) {
-    // Call the remapper
-    // print_field_hyperslab (ext_state_field);
-    // print_field_hyperslab (hxt_state_field);
-    // print_field_hyperslab (int_state_field);
-    refine_remapper->remap(true);
-  } else {
-    for (auto name : m_fields_nudge) {
-      auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
-      auto int_state_field = get_helper_field(name);        // int horiz, int vert
-      auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
-      auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
-      auto ext_state_view  = ext_state_field.get_view<mPack**>();
-      auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
-      auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
-      auto int_state_view  = int_state_field.get_view<mPack**>();
-      // No horizontal interpolation, just copy the data
-      Kokkos::deep_copy(int_state_view, hxt_state_view);
-    }
-  }
+  m_refine_remapper->remap(true);
 
   for (auto name : m_fields_nudge) {
     auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
     auto int_state_field = get_helper_field(name);        // int horiz, int vert
-    auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
-    auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
-    auto ext_state_view  = ext_state_field.get_view<mPack**>();
-    auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
     auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
     auto int_state_view  = int_state_field.get_view<mPack**>();
     // Apply the nudging tendencies to the ATM state
@@ -490,11 +453,9 @@ void Nudging::finalize_impl()
   m_time_interp.finalize();
 }
 // =========================================================================================
-void Nudging::create_helper_field (const std::string& name,
-                                             const FieldLayout& layout,
-                                             const std::string& grid_name,
-                                             const int ps)
-{
+Field Nudging::create_helper_field(const std::string &name,
+                                   const FieldLayout &layout,
+                                   const std::string &grid_name, const int ps) {
   using namespace ekat::units;
   // For helper fields we don't bother w/ units, so we set them to non-dimensional
   FieldIdentifier id(name,layout,Units::nondimensional(),grid_name);
@@ -510,6 +471,7 @@ void Nudging::create_helper_field (const std::string& name,
   f.deep_copy(ekat::ScalarTraits<Real>::invalid());
 
   m_helper_fields[name] = f;
+  return m_helper_fields[name];
 }
 
 // =========================================================================================
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
index dd0718042a..ec66a6933d 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
@@ -14,6 +14,7 @@
 #include "share/util/scream_vertical_interpolation.hpp"
 #include "share/util/scream_time_stamp.hpp"
 #include "share/grid/remap/refining_remapper_p2p.hpp"
+#include "share/grid/remap/do_nothing_remapper.hpp"
 
 #include <string>
 
@@ -101,10 +102,8 @@ class Nudging : public AtmosphereProcess
   void init_buffers(const ATMBufferManager &buffer_manager);
 
   // Creates an helper field, not to be shared with the AD's FieldManager
-  void create_helper_field (const std::string& name,
-                            const FieldLayout& layout,
-                            const std::string& grid_name,
-                            const int ps=0);
+  Field create_helper_field(const std::string &name, const FieldLayout &layout,
+                            const std::string &grid_name, const int ps = 0);
 
   // Query if a local field exists
   bool has_helper_field (const std::string& name) const { return m_helper_fields.find(name)!=m_helper_fields.end(); }
@@ -139,7 +138,13 @@ class Nudging : public AtmosphereProcess
   // file containing coarse data mapping
   std::string m_refine_remap_file;
   // (refining) remapper object
-  std::shared_ptr<scream::RefiningRemapperP2P> refine_remapper;
+  std::shared_ptr<scream::AbstractRemapper> m_refine_remapper;
+  // grid for coarse data
+  std::shared_ptr<scream::AbstractGrid> grid_ext;
+  // grid after vertical interpolation
+  std::shared_ptr<scream::AbstractGrid> grid_hxt;
+  // grid after horizontal interpolation
+  std::shared_ptr<scream::AbstractGrid> grid_int;
 
   util::TimeInterpolation m_time_interp;
 

From ec773f79e9126d6ec5a172dc83b9f1f8dba905a7 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 13:26:25 -0600
Subject: [PATCH 11/27] reorg includes

---
 .../src/physics/nudging/eamxx_nudging_process_interface.cpp     | 2 ++
 .../src/physics/nudging/eamxx_nudging_process_interface.hpp     | 1 -
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index a806c2c16b..c256d71b70 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -1,5 +1,7 @@
 #include "eamxx_nudging_process_interface.hpp"
 #include "share/util/scream_universal_constants.hpp"
+#include "share/grid/remap/refining_remapper_p2p.hpp"
+#include "share/grid/remap/abstract_remapper.hpp"
 
 namespace scream
 {
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
index ec66a6933d..a01c864198 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
@@ -13,7 +13,6 @@
 #include "share/grid/point_grid.hpp"
 #include "share/util/scream_vertical_interpolation.hpp"
 #include "share/util/scream_time_stamp.hpp"
-#include "share/grid/remap/refining_remapper_p2p.hpp"
 #include "share/grid/remap/do_nothing_remapper.hpp"
 
 #include <string>

From a9fce39648a2c890734142548fe5b77664d9160d Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 13:30:33 -0600
Subject: [PATCH 12/27] do shallow grid clones only

---
 .../nudging/eamxx_nudging_process_interface.cpp        | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index c256d71b70..4c4fe2c161 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -144,7 +144,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // because we need to know the grid information.
   // For now, we are doing the horizontal interpolation last,
   // so we use the m_grid (model physics) as the target grid
-  grid_int = m_grid->clone(m_grid->name(), false);
+  grid_int = m_grid->clone(m_grid->name(), true);
   // We also need a temporary grid for the external grid
   std::shared_ptr<const scream::AbstractGrid> grid_ext_const;
   if(m_refine_remap) {
@@ -154,25 +154,25 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     // If we are refine-remapping, then get grid from remapper
     grid_ext_const = m_refine_remapper->get_src_grid();
     // Deep clone it though to get rid of "const" stuff
-    grid_ext = grid_ext_const->clone(grid_ext_const->name(), false);
+    grid_ext = grid_ext_const->clone(grid_ext_const->name(), true);
     // The first grid is grid_ext (external grid, i.e., files),
     // so, grid_ext can potentially have different levels
     grid_ext->reset_num_vertical_lev(m_num_src_levs);
     // The second grid is grid_hxt (external horiz grid, but model physics
     // vert grid, so potentially a bit of a mess)
-    grid_hxt = grid_ext->clone(grid_ext->name(), false);
+    grid_hxt = grid_ext->clone(grid_ext->name(), true);
     grid_hxt->reset_num_vertical_lev(m_num_levs);
   } else {
     // DoNothingRemapper
     // If not refine-remapping, then use whatever was used before,
     // i.e., deep clone the physics grid
-    grid_ext = m_grid->clone(m_grid->name(), false);
+    grid_ext = m_grid->clone(m_grid->name(), true);
     // The first grid is grid_ext (external grid, i.e., files),
     // so, grid_ext can potentially have different levels
     grid_ext->reset_num_vertical_lev(m_num_src_levs);
     // The second grid is grid_hxt (external horiz grid, but model physics
     // vert grid, so potentially a bit of a mess)
-    grid_hxt = grid_ext->clone(grid_ext->name(), false);
+    grid_hxt = grid_ext->clone(grid_ext->name(), true);
     grid_hxt->reset_num_vertical_lev(m_num_levs);
     m_refine_remapper = std::make_shared<DoNothingRemapper>(grid_hxt, grid_int);
   }

From 43dfc57b3ca8b23e80bfea8b2e8ee5aa009dfb85 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 13:34:23 -0600
Subject: [PATCH 13/27] don't unnecessarily change existing code style

---
 .../nudging/eamxx_nudging_process_interface.cpp        | 10 +++++-----
 .../nudging/eamxx_nudging_process_interface.hpp        |  6 ++++--
 2 files changed, 9 insertions(+), 7 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 4c4fe2c161..44eae9593f 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -145,14 +145,12 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // For now, we are doing the horizontal interpolation last,
   // so we use the m_grid (model physics) as the target grid
   grid_int = m_grid->clone(m_grid->name(), true);
-  // We also need a temporary grid for the external grid
-  std::shared_ptr<const scream::AbstractGrid> grid_ext_const;
   if(m_refine_remap) {
     // P2P remapper
     m_refine_remapper =
         std::make_shared<RefiningRemapperP2P>(grid_int, m_refine_remap_file);
     // If we are refine-remapping, then get grid from remapper
-    grid_ext_const = m_refine_remapper->get_src_grid();
+    auto grid_ext_const = m_refine_remapper->get_src_grid();
     // Deep clone it though to get rid of "const" stuff
     grid_ext = grid_ext_const->clone(grid_ext_const->name(), true);
     // The first grid is grid_ext (external grid, i.e., files),
@@ -456,8 +454,10 @@ void Nudging::finalize_impl()
 }
 // =========================================================================================
 Field Nudging::create_helper_field(const std::string &name,
-                                   const FieldLayout &layout,
-                                   const std::string &grid_name, const int ps) {
+                                             const FieldLayout &layout,
+                                             const std::string &grid_name,
+                                             const int ps)
+{
   using namespace ekat::units;
   // For helper fields we don't bother w/ units, so we set them to non-dimensional
   FieldIdentifier id(name,layout,Units::nondimensional(),grid_name);
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
index a01c864198..392f4559ca 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
@@ -101,8 +101,10 @@ class Nudging : public AtmosphereProcess
   void init_buffers(const ATMBufferManager &buffer_manager);
 
   // Creates an helper field, not to be shared with the AD's FieldManager
-  Field create_helper_field(const std::string &name, const FieldLayout &layout,
-                            const std::string &grid_name, const int ps = 0);
+  Field create_helper_field(const std::string &name,
+                            const FieldLayout &layout,
+                            const std::string &grid_name,
+                            const int ps = 0);
 
   // Query if a local field exists
   bool has_helper_field (const std::string& name) const { return m_helper_fields.find(name)!=m_helper_fields.end(); }

From 3159e9ddf87493daf9b6f59d837ec98c734cb3ca Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 13:36:37 -0600
Subject: [PATCH 14/27] add impl comment on remap ops

---
 .../src/physics/nudging/eamxx_nudging_process_interface.cpp  | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 44eae9593f..7a99c1a842 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -416,8 +416,9 @@ void Nudging::run_impl (const double dt)
 
   }
 
-  // Refine-remap onto target atmosphere state horiz grid ("int")
-  // Note that we are going from hxt to int here
+  // Refine-remap onto target atmosphere state horiz grid ("int");
+  // note that if the nudging data comes from the same grid as the model,
+  // this remap step is a no-op; otherwise, we refine-remap from hxt to int
   m_refine_remapper->remap(true);
 
   for (auto name : m_fields_nudge) {

From b324eacbe1cbbd8a60bb17eb2c6d343a113cbd85 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 13:40:03 -0600
Subject: [PATCH 15/27] revert more accidental auto formatting

---
 .../nudging/eamxx_nudging_process_interface.cpp   | 15 ++++++---------
 .../nudging/eamxx_nudging_process_interface.hpp   |  8 ++++----
 2 files changed, 10 insertions(+), 13 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 7a99c1a842..feb5dc0742 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -222,10 +222,8 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     auto grid_hxt_name = grid_hxt->name();
     auto field  = get_field_out_wrap(name);
     auto layout = field.get_header().get_identifier().get_layout();
-    auto field_ext =
-        create_helper_field(name_ext, scalar3d_layout_mid, grid_ext_name, ps);
-    auto field_hxt =
-        create_helper_field(name_hxt, scalar3d_layout_hid, grid_hxt_name, ps);
+    auto field_ext = create_helper_field(name_ext, scalar3d_layout_mid, grid_ext_name, ps);
+    auto field_hxt = create_helper_field(name_hxt, scalar3d_layout_hid, grid_hxt_name, ps);
     Field field_int;
     if(m_refine_remap) {
       field_int = create_helper_field(name, layout, grid_int_name, ps);
@@ -251,8 +249,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   {
     auto grid_name = m_grid->name();
     FieldLayout scalar3d_layout_grid { {COL,LEV}, {m_num_cols, m_num_levs} };
-    auto nudging_weights = create_helper_field(
-        "nudging_weights", scalar3d_layout_grid, grid_name, ps);
+    auto nudging_weights = create_helper_field("nudging_weights", scalar3d_layout_grid, grid_name, ps);
     std::vector<Field> fields;
     fields.push_back(nudging_weights);
     AtmosphereInput src_weights_input(m_weights_file, grid_ext, fields);
@@ -454,9 +451,9 @@ void Nudging::finalize_impl()
   m_time_interp.finalize();
 }
 // =========================================================================================
-Field Nudging::create_helper_field(const std::string &name,
-                                             const FieldLayout &layout,
-                                             const std::string &grid_name,
+Field Nudging::create_helper_field(const std::string& name,
+                                             const FieldLayout& layout,
+                                             const std::string& grid_name,
                                              const int ps)
 {
   using namespace ekat::units;
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
index 392f4559ca..ad94568c7b 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
@@ -101,10 +101,10 @@ class Nudging : public AtmosphereProcess
   void init_buffers(const ATMBufferManager &buffer_manager);
 
   // Creates an helper field, not to be shared with the AD's FieldManager
-  Field create_helper_field(const std::string &name,
-                            const FieldLayout &layout,
-                            const std::string &grid_name,
-                            const int ps = 0);
+  Field create_helper_field(const std::string& name,
+                            const FieldLayout& layout,
+                            const std::string& grid_name,
+                            const int ps=0);
 
   // Query if a local field exists
   bool has_helper_field (const std::string& name) const { return m_helper_fields.find(name)!=m_helper_fields.end(); }

From 430a6e4ecb37d3fbafcc5517c02f95894cebff98 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 13:42:38 -0600
Subject: [PATCH 16/27] add back space before paran to keep style consistent

---
 .../physics/nudging/eamxx_nudging_process_interface.cpp   | 8 ++++----
 .../physics/nudging/eamxx_nudging_process_interface.hpp   | 2 +-
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index feb5dc0742..368368396d 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -16,7 +16,7 @@ Nudging::Nudging (const ekat::Comm& comm, const ekat::ParameterList& params)
   m_use_weights   = m_params.get<bool>("use_nudging_weights",false);
   // Whether or not to do horizontal refine remap
   m_refine_remap = m_params.get<bool>("do_nudging_refine_remap", false);
-  if(m_refine_remap) {
+  if (m_refine_remap) {
     // If we are doing horizontal refine remap, we need to get the map file
     m_refine_remap_file = m_params.get<std::string>(
         "nudging_refine_remap_mapfile", "no-file-given");
@@ -145,7 +145,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // For now, we are doing the horizontal interpolation last,
   // so we use the m_grid (model physics) as the target grid
   grid_int = m_grid->clone(m_grid->name(), true);
-  if(m_refine_remap) {
+  if (m_refine_remap) {
     // P2P remapper
     m_refine_remapper =
         std::make_shared<RefiningRemapperP2P>(grid_int, m_refine_remap_file);
@@ -225,7 +225,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     auto field_ext = create_helper_field(name_ext, scalar3d_layout_mid, grid_ext_name, ps);
     auto field_hxt = create_helper_field(name_hxt, scalar3d_layout_hid, grid_hxt_name, ps);
     Field field_int;
-    if(m_refine_remap) {
+    if (m_refine_remap) {
       field_int = create_helper_field(name, layout, grid_int_name, ps);
     } else {
       field_int             = field_hxt.alias(name);
@@ -451,7 +451,7 @@ void Nudging::finalize_impl()
   m_time_interp.finalize();
 }
 // =========================================================================================
-Field Nudging::create_helper_field(const std::string& name,
+Field Nudging::create_helper_field (const std::string& name,
                                              const FieldLayout& layout,
                                              const std::string& grid_name,
                                              const int ps)
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
index ad94568c7b..dce9992082 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
@@ -101,7 +101,7 @@ class Nudging : public AtmosphereProcess
   void init_buffers(const ATMBufferManager &buffer_manager);
 
   // Creates an helper field, not to be shared with the AD's FieldManager
-  Field create_helper_field(const std::string& name,
+  Field create_helper_field (const std::string& name,
                             const FieldLayout& layout,
                             const std::string& grid_name,
                             const int ps=0);

From d109bcc75b29a16ae4bc25599849f23c416a440c Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 14:22:08 -0600
Subject: [PATCH 17/27] reorg boolean logic and other refines

---
 .../cime_config/namelist_defaults_scream.xml  |  1 -
 .../eamxx_nudging_process_interface.cpp       | 67 ++++++++++++-------
 .../eamxx_nudging_process_interface.hpp       |  6 --
 3 files changed, 42 insertions(+), 32 deletions(-)

diff --git a/components/eamxx/cime_config/namelist_defaults_scream.xml b/components/eamxx/cime_config/namelist_defaults_scream.xml
index 783d7faf05..3fde3a3d41 100644
--- a/components/eamxx/cime_config/namelist_defaults_scream.xml
+++ b/components/eamxx/cime_config/namelist_defaults_scream.xml
@@ -240,7 +240,6 @@ be lost if SCREAM_HACK_XML is not enabled.
     STATIC_1D_VERTICAL_PROFILE: The dataset uses a fixed in time single pressure profile, variable name 'p_lev' with dimension (nlev).">TIME_DEPENDENT_3D_PROFILE</source_pressure_type>
       <source_pressure_file type="string" doc="If STATIC_1D_VERTICAL_PROFILE, this is an optional arg to point to a file with the source pressure levels defined.  
     Default is to look for p_levs in the first nudging_filename file"/>
-      <do_nudging_refine_remap type="logical" doc="Flag for whether to remap nudging fields to the physics grid">false</do_nudging_refine_remap>
       <nudging_refine_remap_mapfile type="string" doc="File containing the remapping weights for nudging fields to the physics grid">"no-file-given"</nudging_refine_remap_mapfile>
     </nudging>
 
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 368368396d..2ae92bfbb6 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -14,18 +14,15 @@ Nudging::Nudging (const ekat::Comm& comm, const ekat::ParameterList& params)
   m_timescale = m_params.get<int>("nudging_timescale",0);
   m_fields_nudge = m_params.get<std::vector<std::string>>("nudging_fields");
   m_use_weights   = m_params.get<bool>("use_nudging_weights",false);
-  // Whether or not to do horizontal refine remap
-  m_refine_remap = m_params.get<bool>("do_nudging_refine_remap", false);
-  if (m_refine_remap) {
-    // If we are doing horizontal refine remap, we need to get the map file
-    m_refine_remap_file = m_params.get<std::string>(
-        "nudging_refine_remap_mapfile", "no-file-given");
-    // Check that the file is provided; if not, throw an error
-    // TODO: add a submit error (in xml configs)
-    EKAT_REQUIRE_MSG(m_refine_remap_file != "no-file-given",
-                     "Error! Nudging::Nudging - horizontal refine "
-                     "remap is enabled but no "
-                     "nudging_refine_remap_mapfile is provided.");
+  // If we are doing horizontal refine remap, we need to get the map file from user
+  m_refine_remap_file = m_params.get<std::string>(
+      "nudging_refine_remap_mapfile", "no-file-given");
+  // If the user gives a mapfile, assume we are refine-remapping,
+  // and we will check later if the file actually does fine-remap 
+  if (m_refine_remap_file != "no-file-given") {
+    m_refine_remap = true;
+  } else {
+    m_refine_remap = false;
   }
   auto src_pres_type = m_params.get<std::string>("source_pressure_type","TIME_DEPENDENT_3D_PROFILE");
   if (src_pres_type=="TIME_DEPENDENT_3D_PROFILE") {
@@ -139,6 +136,13 @@ void Nudging::apply_weighted_tendency(Field& base, const Field& next, const Fiel
 void Nudging::initialize_impl (const RunType /* run_type */)
 {
   using namespace ShortFieldTagsNames;
+  // Set up pointers for grids
+  // grid for coarse data
+  std::shared_ptr<scream::AbstractGrid> grid_ext;
+  // grid after vertical interpolation
+  std::shared_ptr<scream::AbstractGrid> grid_hxt;
+  // grid after horizontal interpolation
+  std::shared_ptr<scream::AbstractGrid> grid_int;
 
   // Initialize the refining remapper stuff at the outset,
   // because we need to know the grid information.
@@ -153,6 +157,16 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     auto grid_ext_const = m_refine_remapper->get_src_grid();
     // Deep clone it though to get rid of "const" stuff
     grid_ext = grid_ext_const->clone(grid_ext_const->name(), true);
+    /* quick check here to ensure we are in good stnading */
+    // If the user gives a mapfile, we assume we are refine-remapping,
+    // but we should check if the mapfile is actually remapping stuff,
+    // so we compare the global columns of the target and source grids
+    auto grid_int_global_cols = grid_int->get_num_global_dofs();
+    auto grid_ext_global_cols = grid_ext->get_num_global_dofs();
+    EKAT_REQUIRE_MSG(
+        grid_int_global_cols != grid_ext_global_cols,
+        "Error! Nudging::initialize_impl - the mapfile given for "
+        "refine-remapping does not remap anything.  Please check the mapfile.");
     // The first grid is grid_ext (external grid, i.e., files),
     // so, grid_ext can potentially have different levels
     grid_ext->reset_num_vertical_lev(m_num_src_levs);
@@ -174,12 +188,16 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     grid_hxt->reset_num_vertical_lev(m_num_levs);
     m_refine_remapper = std::make_shared<DoNothingRemapper>(grid_hxt, grid_int);
   }
-  // Declare the layouts for the helper fields (ext --> mid)
-  FieldLayout scalar2d_layout_mid { {LEV}, {m_num_src_levs} };
-  FieldLayout scalar3d_layout_mid { {COL,LEV}, {m_num_cols, m_num_src_levs} };
-  // Declare the layouts for the helper fields (hxt --> hid)
-  FieldLayout scalar2d_layout_hid { {LEV}, {m_num_levs}};
-  FieldLayout scalar3d_layout_hid { {COL,LEV}, {m_num_cols, m_num_levs} };
+  // Declare the layouts for the helper fields (int)
+  FieldLayout scalar2d_layout_mid { {LEV}, {m_num_levs} };
+  FieldLayout scalar3d_layout_mid { {COL,LEV}, {m_num_cols, m_num_levs} };
+  auto m_num_cols_ext = grid_ext->get_num_local_dofs();
+  // Declare the layouts for the helper fields (hxt)
+  FieldLayout scalar2d_layout_mid_hxt { {LEV}, {m_num_levs}};
+  FieldLayout scalar3d_layout_mid_hxt { {COL,LEV}, {m_num_cols_ext, m_num_levs} };
+  // Declare the layouts for the helper fields (ext)
+  FieldLayout scalar2d_layout_mid_ext { {LEV}, {m_num_src_levs}};
+  FieldLayout scalar3d_layout_mid_ext { {COL,LEV}, {m_num_cols_ext, m_num_src_levs} };
 
   // Initialize the time interpolator
   m_time_interp = util::TimeInterpolation(grid_ext, m_datafiles);
@@ -188,7 +206,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // To be extra careful, this should be the ext_grid
   const auto& grid_ext_name = grid_ext->name();
   if (m_src_pres_type == TIME_DEPENDENT_3D_PROFILE) {
-    auto pmid_ext = create_helper_field("p_mid_ext", scalar3d_layout_mid, grid_ext_name, ps);
+    auto pmid_ext = create_helper_field("p_mid_ext", scalar3d_layout_mid_ext, grid_ext_name, ps);
     m_time_interp.add_field(pmid_ext.alias("p_mid"),true);
   } else if (m_src_pres_type == STATIC_1D_VERTICAL_PROFILE) {
     // Load p_levs from source data file
@@ -197,11 +215,11 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     in_params.set("Skip_Grid_Checks",true);  // We need to skip grid checks because multiple ranks may want the same column of source data.
     std::map<std::string,view_1d_host<Real>> host_views;
     std::map<std::string,FieldLayout>  layouts;
-    auto pmid_ext = create_helper_field("p_mid_ext", scalar2d_layout_mid, grid_ext_name, ps);
+    auto pmid_ext = create_helper_field("p_mid_ext", scalar2d_layout_mid_ext, grid_ext_name, ps);
     auto pmid_ext_v = pmid_ext.get_view<Real*,Host>();
     in_params.set<std::vector<std::string>>("Field Names",{"p_levs"});
     host_views["p_levs"] = pmid_ext_v;
-    layouts.emplace("p_levs",scalar2d_layout_mid);
+    layouts.emplace("p_levs",scalar2d_layout_mid_ext);
     AtmosphereInput src_input(in_params,grid_ext,host_views,layouts);
     src_input.read_variables(-1);
     src_input.finalize();
@@ -222,8 +240,8 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     auto grid_hxt_name = grid_hxt->name();
     auto field  = get_field_out_wrap(name);
     auto layout = field.get_header().get_identifier().get_layout();
-    auto field_ext = create_helper_field(name_ext, scalar3d_layout_mid, grid_ext_name, ps);
-    auto field_hxt = create_helper_field(name_hxt, scalar3d_layout_hid, grid_hxt_name, ps);
+    auto field_ext = create_helper_field(name_ext, scalar3d_layout_mid_ext, grid_ext_name, ps);
+    auto field_hxt = create_helper_field(name_hxt, scalar3d_layout_mid_hxt, grid_hxt_name, ps);
     Field field_int;
     if (m_refine_remap) {
       field_int = create_helper_field(name, layout, grid_int_name, ps);
@@ -248,8 +266,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   if (m_use_weights)
   {
     auto grid_name = m_grid->name();
-    FieldLayout scalar3d_layout_grid { {COL,LEV}, {m_num_cols, m_num_levs} };
-    auto nudging_weights = create_helper_field("nudging_weights", scalar3d_layout_grid, grid_name, ps);
+    auto nudging_weights = create_helper_field("nudging_weights", scalar3d_layout_mid, grid_name, ps);
     std::vector<Field> fields;
     fields.push_back(nudging_weights);
     AtmosphereInput src_weights_input(m_weights_file, grid_ext, fields);
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
index dce9992082..39f957093f 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
@@ -140,12 +140,6 @@ class Nudging : public AtmosphereProcess
   std::string m_refine_remap_file;
   // (refining) remapper object
   std::shared_ptr<scream::AbstractRemapper> m_refine_remapper;
-  // grid for coarse data
-  std::shared_ptr<scream::AbstractGrid> grid_ext;
-  // grid after vertical interpolation
-  std::shared_ptr<scream::AbstractGrid> grid_hxt;
-  // grid after horizontal interpolation
-  std::shared_ptr<scream::AbstractGrid> grid_int;
 
   util::TimeInterpolation m_time_interp;
 

From 0325c57b827d165227a057ecadb64720ea164a05 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 14:24:40 -0600
Subject: [PATCH 18/27] no need for another grid_name call

---
 .../src/physics/nudging/eamxx_nudging_process_interface.cpp      | 1 -
 1 file changed, 1 deletion(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 2ae92bfbb6..5fbf589e4a 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -265,7 +265,6 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // do the interpolation.
   if (m_use_weights)
   {
-    auto grid_name = m_grid->name();
     auto nudging_weights = create_helper_field("nudging_weights", scalar3d_layout_mid, grid_name, ps);
     std::vector<Field> fields;
     fields.push_back(nudging_weights);

From c5c1d89051f48ed23839c5bf75e3e3d8bd3ffa55 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 14:48:52 -0600
Subject: [PATCH 19/27] simplify and rename hxt to tmp

---
 .../eamxx_nudging_process_interface.cpp       | 83 +++++++++----------
 1 file changed, 40 insertions(+), 43 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 5fbf589e4a..8f54be6ddf 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -137,25 +137,24 @@ void Nudging::initialize_impl (const RunType /* run_type */)
 {
   using namespace ShortFieldTagsNames;
   // Set up pointers for grids
-  // grid for coarse data
+  // external grid: from source data
   std::shared_ptr<scream::AbstractGrid> grid_ext;
-  // grid after vertical interpolation
-  std::shared_ptr<scream::AbstractGrid> grid_hxt;
-  // grid after horizontal interpolation
+  // temporary grid: after vertical interpolation
+  std::shared_ptr<scream::AbstractGrid> grid_tmp;
+  // internal grid: after horizontal interpolation
   std::shared_ptr<scream::AbstractGrid> grid_int;
 
   // Initialize the refining remapper stuff at the outset,
-  // because we need to know the grid information.
-  // For now, we are doing the horizontal interpolation last,
+  // because we need to know the grid information;
+  // for now, we are doing the horizontal interpolation last,
   // so we use the m_grid (model physics) as the target grid
   grid_int = m_grid->clone(m_grid->name(), true);
   if (m_refine_remap) {
     // P2P remapper
     m_refine_remapper =
         std::make_shared<RefiningRemapperP2P>(grid_int, m_refine_remap_file);
-    // If we are refine-remapping, then get grid from remapper
+    // Get grid from remapper, and clone it
     auto grid_ext_const = m_refine_remapper->get_src_grid();
-    // Deep clone it though to get rid of "const" stuff
     grid_ext = grid_ext_const->clone(grid_ext_const->name(), true);
     /* quick check here to ensure we are in good stnading */
     // If the user gives a mapfile, we assume we are refine-remapping,
@@ -170,32 +169,29 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     // The first grid is grid_ext (external grid, i.e., files),
     // so, grid_ext can potentially have different levels
     grid_ext->reset_num_vertical_lev(m_num_src_levs);
-    // The second grid is grid_hxt (external horiz grid, but model physics
-    // vert grid, so potentially a bit of a mess)
-    grid_hxt = grid_ext->clone(grid_ext->name(), true);
-    grid_hxt->reset_num_vertical_lev(m_num_levs);
   } else {
     // DoNothingRemapper
-    // If not refine-remapping, then use whatever was used before,
-    // i.e., deep clone the physics grid
+    // We set external grid as physics grid, but maybe different levs
     grid_ext = m_grid->clone(m_grid->name(), true);
-    // The first grid is grid_ext (external grid, i.e., files),
-    // so, grid_ext can potentially have different levels
     grid_ext->reset_num_vertical_lev(m_num_src_levs);
-    // The second grid is grid_hxt (external horiz grid, but model physics
-    // vert grid, so potentially a bit of a mess)
-    grid_hxt = grid_ext->clone(grid_ext->name(), true);
-    grid_hxt->reset_num_vertical_lev(m_num_levs);
-    m_refine_remapper = std::make_shared<DoNothingRemapper>(grid_hxt, grid_int);
+    // We set up a DoNothingRemapper, which will just copy the data
+    m_refine_remapper = std::make_shared<DoNothingRemapper>(grid_int, grid_int);
   }
-  // Declare the layouts for the helper fields (int)
+  // The temporary grid is the external grid, but with
+  // the same number of levels as the internal (physics) grid
+  grid_tmp = grid_ext->clone(grid_ext->name(), true);
+  grid_tmp->reset_num_vertical_lev(m_num_levs);
+
+  // Declare the layouts for the helper fields (int: internal)
   FieldLayout scalar2d_layout_mid { {LEV}, {m_num_levs} };
   FieldLayout scalar3d_layout_mid { {COL,LEV}, {m_num_cols, m_num_levs} };
+
+  // Get the number of external cols on current rank
   auto m_num_cols_ext = grid_ext->get_num_local_dofs();
-  // Declare the layouts for the helper fields (hxt)
-  FieldLayout scalar2d_layout_mid_hxt { {LEV}, {m_num_levs}};
-  FieldLayout scalar3d_layout_mid_hxt { {COL,LEV}, {m_num_cols_ext, m_num_levs} };
-  // Declare the layouts for the helper fields (ext)
+  // Declare the layouts for the helper fields (tmp: temporay))
+  FieldLayout scalar2d_layout_mid_tmp { {LEV}, {m_num_levs}};
+  FieldLayout scalar3d_layout_mid_tmp { {COL,LEV}, {m_num_cols_ext, m_num_levs} };
+  // Declare the layouts for the helper fields (ext: external)
   FieldLayout scalar2d_layout_mid_ext { {LEV}, {m_num_src_levs}};
   FieldLayout scalar3d_layout_mid_ext { {COL,LEV}, {m_num_cols_ext, m_num_src_levs} };
 
@@ -229,29 +225,29 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // Open the registration!
   m_refine_remapper->registration_begins();
 
-  // To create helper fields for later; we do both hxt and ext...
+  // To create helper fields for later; we do both tmp and ext...
   for (auto name : m_fields_nudge) {
     std::string name_ext = name + "_ext";
-    std::string name_hxt = name + "_hxt";
+    std::string name_tmp = name + "_tmp";
     // Helper fields that will temporarily store the target state, which can then
     // be used to back out a nudging tendency
     auto grid_int_name = m_grid->name();
     auto grid_ext_name = grid_ext->name();
-    auto grid_hxt_name = grid_hxt->name();
+    auto grid_tmp_name = grid_tmp->name();
     auto field  = get_field_out_wrap(name);
     auto layout = field.get_header().get_identifier().get_layout();
     auto field_ext = create_helper_field(name_ext, scalar3d_layout_mid_ext, grid_ext_name, ps);
-    auto field_hxt = create_helper_field(name_hxt, scalar3d_layout_mid_hxt, grid_hxt_name, ps);
+    auto field_tmp = create_helper_field(name_tmp, scalar3d_layout_mid_tmp, grid_tmp_name, ps);
     Field field_int;
     if (m_refine_remap) {
       field_int = create_helper_field(name, layout, grid_int_name, ps);
     } else {
-      field_int             = field_hxt.alias(name);
+      field_int             = field_tmp.alias(name);
       m_helper_fields[name] = field_int;
     }
 
     // Register the fields with the remapper
-    m_refine_remapper->register_field(field_hxt, field_int);
+    m_refine_remapper->register_field(field_tmp, field_int);
     // Add them to time interpolator
     m_time_interp.add_field(field_ext.alias(name), true);
   }
@@ -265,6 +261,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
   // do the interpolation.
   if (m_use_weights)
   {
+    auto grid_name = m_grid->name();
     auto nudging_weights = create_helper_field("nudging_weights", scalar3d_layout_mid, grid_name, ps);
     std::vector<Field> fields;
     fields.push_back(nudging_weights);
@@ -303,9 +300,9 @@ void Nudging::run_impl (const double dt)
     auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
     auto int_state_field = get_helper_field(name);        // int horiz, int vert
     auto ext_state_field = get_helper_field(name+"_ext"); // ext horiz, ext vert
-    auto hxt_state_field = get_helper_field(name+"_hxt"); // ext horiz, int vert
+    auto tmp_state_field = get_helper_field(name+"_tmp"); // ext horiz, int vert
     auto ext_state_view  = ext_state_field.get_view<mPack**>();
-    auto hxt_state_view  = hxt_state_field.get_view<mPack**>();
+    auto tmp_state_view  = tmp_state_field.get_view<mPack**>();
     auto atm_state_view  = atm_state_field.get_view<mPack**>();  // TODO: Right now assume whatever field is defined on COLxLEV
     auto int_state_view  = int_state_field.get_view<mPack**>();
     auto int_mask_view = m_buffer.int_mask_view;
@@ -360,12 +357,12 @@ void Nudging::run_impl (const double dt)
     });
 
     // Vertical Interpolation onto atmosphere state pressure levels
-    // Note that we are going from ext to hxt here
+    // Note that we are going from ext to tmp here
     if (m_src_pres_type == TIME_DEPENDENT_3D_PROFILE) {
       perform_vertical_interpolation<Real,1,2>(p_mid_ext_p,
                                                p_mid_v,
                                                ext_state_view,
-                                               hxt_state_view,
+                                               tmp_state_view,
                                                int_mask_view,
                                                m_num_src_levs,
                                                m_num_levs);
@@ -373,7 +370,7 @@ void Nudging::run_impl (const double dt)
       perform_vertical_interpolation<Real,1,2>(p_mid_ext_1d,
                                                p_mid_v,
                                                ext_state_view,
-                                               hxt_state_view,
+                                               tmp_state_view,
                                                int_mask_view,
                                                m_num_src_levs,
                                                m_num_levs);
@@ -394,7 +391,7 @@ void Nudging::run_impl (const double dt)
        	       KOKKOS_LAMBDA(MemberType const& team) {
       const int icol = team.league_rank();
       auto int_mask_view_1d  = ekat::subview(int_mask_view,icol);
-      auto hxt_state_view_1d = ekat::subview(hxt_state_view,icol);
+      auto tmp_state_view_1d = ekat::subview(tmp_state_view,icol);
       Real fill_value;
       int  fill_idx = -1;
       // Scan top to surf and backfill all values near TOM that are masked.
@@ -403,12 +400,12 @@ void Nudging::run_impl (const double dt)
 	const auto iidx  = kk % mPack::n;
         // Check if this index is masked
 	if (!int_mask_view_1d(ipack)[iidx]) {
-	  fill_value = hxt_state_view_1d(ipack)[iidx];
+	  fill_value = tmp_state_view_1d(ipack)[iidx];
 	  fill_idx = kk;
 	  for (int jj=0; jj<fill_idx; ++jj) {
             const auto jpack = jj / mPack::n;
 	    const auto jidx  = jj % mPack::n;
-	    hxt_state_view_1d(jpack)[jidx] = fill_value;
+	    tmp_state_view_1d(jpack)[jidx] = fill_value;
 	  }
 	  break;
 	}
@@ -420,9 +417,9 @@ void Nudging::run_impl (const double dt)
 	const auto iidx  = kk % mPack::n;
         // Check if this index is masked
 	if (!int_mask_view_1d(ipack)[iidx]) {
-	  fill_value = hxt_state_view_1d(ipack)[iidx];
+	  fill_value = tmp_state_view_1d(ipack)[iidx];
 	} else {
-	  hxt_state_view_1d(ipack)[iidx] = fill_value;
+	  tmp_state_view_1d(ipack)[iidx] = fill_value;
 	}
       }
     });
@@ -431,7 +428,7 @@ void Nudging::run_impl (const double dt)
 
   // Refine-remap onto target atmosphere state horiz grid ("int");
   // note that if the nudging data comes from the same grid as the model,
-  // this remap step is a no-op; otherwise, we refine-remap from hxt to int
+  // this remap step is a no-op; otherwise, we refine-remap from tmp to int
   m_refine_remapper->remap(true);
 
   for (auto name : m_fields_nudge) {

From 387e6f3fcfac38a1217db3a5ba3b9e9957a82d78 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 14:51:16 -0600
Subject: [PATCH 20/27] fix includes

---
 .../src/physics/nudging/eamxx_nudging_process_interface.cpp     | 2 +-
 .../src/physics/nudging/eamxx_nudging_process_interface.hpp     | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 8f54be6ddf..cf795e1a8c 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -1,7 +1,7 @@
 #include "eamxx_nudging_process_interface.hpp"
 #include "share/util/scream_universal_constants.hpp"
 #include "share/grid/remap/refining_remapper_p2p.hpp"
-#include "share/grid/remap/abstract_remapper.hpp"
+#include "share/grid/remap/do_nothing_remapper.hpp"
 
 namespace scream
 {
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
index 39f957093f..339eb3dfbe 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.hpp
@@ -13,7 +13,7 @@
 #include "share/grid/point_grid.hpp"
 #include "share/util/scream_vertical_interpolation.hpp"
 #include "share/util/scream_time_stamp.hpp"
-#include "share/grid/remap/do_nothing_remapper.hpp"
+#include "share/grid/remap/abstract_remapper.hpp"
 
 #include <string>
 

From 6aacee57dba2bef2c30d74256b14fb4d9d4cbbed Mon Sep 17 00:00:00 2001
From: Naser Mahfouz <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 13:13:55 -0800
Subject: [PATCH 21/27] improve docs and restructure some code

---
 .../cime_config/namelist_defaults_scream.xml  |  2 +-
 .../eamxx_nudging_process_interface.cpp       | 23 ++++++++-----------
 2 files changed, 11 insertions(+), 14 deletions(-)

diff --git a/components/eamxx/cime_config/namelist_defaults_scream.xml b/components/eamxx/cime_config/namelist_defaults_scream.xml
index 3fde3a3d41..f5047958d0 100644
--- a/components/eamxx/cime_config/namelist_defaults_scream.xml
+++ b/components/eamxx/cime_config/namelist_defaults_scream.xml
@@ -240,7 +240,7 @@ be lost if SCREAM_HACK_XML is not enabled.
     STATIC_1D_VERTICAL_PROFILE: The dataset uses a fixed in time single pressure profile, variable name 'p_lev' with dimension (nlev).">TIME_DEPENDENT_3D_PROFILE</source_pressure_type>
       <source_pressure_file type="string" doc="If STATIC_1D_VERTICAL_PROFILE, this is an optional arg to point to a file with the source pressure levels defined.  
     Default is to look for p_levs in the first nudging_filename file"/>
-      <nudging_refine_remap_mapfile type="string" doc="File containing the remapping weights for nudging fields to the physics grid">"no-file-given"</nudging_refine_remap_mapfile>
+      <nudging_refine_remap_mapfile type="string" doc="Refine-remapping mapfile from the source nudging dataset to the physics grid">"no-file-given"</nudging_refine_remap_mapfile>
     </nudging>
 
     <!-- ML correction -->
diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index cf795e1a8c..1c6a4bf4de 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -14,11 +14,11 @@ Nudging::Nudging (const ekat::Comm& comm, const ekat::ParameterList& params)
   m_timescale = m_params.get<int>("nudging_timescale",0);
   m_fields_nudge = m_params.get<std::vector<std::string>>("nudging_fields");
   m_use_weights   = m_params.get<bool>("use_nudging_weights",false);
-  // If we are doing horizontal refine remap, we need to get the map file from user
+  // If we are doing horizontal refine-remapping, we need to get the mapfile from user
   m_refine_remap_file = m_params.get<std::string>(
       "nudging_refine_remap_mapfile", "no-file-given");
   // If the user gives a mapfile, assume we are refine-remapping,
-  // and we will check later if the file actually does fine-remap 
+  // and we will check later if the file actually does refine-remap 
   if (m_refine_remap_file != "no-file-given") {
     m_refine_remap = true;
   } else {
@@ -166,16 +166,14 @@ void Nudging::initialize_impl (const RunType /* run_type */)
         grid_int_global_cols != grid_ext_global_cols,
         "Error! Nudging::initialize_impl - the mapfile given for "
         "refine-remapping does not remap anything.  Please check the mapfile.");
-    // The first grid is grid_ext (external grid, i.e., files),
-    // so, grid_ext can potentially have different levels
+    // Finally, grid_ext may have different levels
     grid_ext->reset_num_vertical_lev(m_num_src_levs);
   } else {
-    // DoNothingRemapper
-    // We set external grid as physics grid, but maybe different levs
+    // We set up a DoNothingRemapper, which will do nothing
+    m_refine_remapper = std::make_shared<DoNothingRemapper>(grid_int, grid_int);
+    // We clone physics grid, but maybe we have different levels
     grid_ext = m_grid->clone(m_grid->name(), true);
     grid_ext->reset_num_vertical_lev(m_num_src_levs);
-    // We set up a DoNothingRemapper, which will just copy the data
-    m_refine_remapper = std::make_shared<DoNothingRemapper>(grid_int, grid_int);
   }
   // The temporary grid is the external grid, but with
   // the same number of levels as the internal (physics) grid
@@ -231,7 +229,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     std::string name_tmp = name + "_tmp";
     // Helper fields that will temporarily store the target state, which can then
     // be used to back out a nudging tendency
-    auto grid_int_name = m_grid->name();
+    auto grid_int_name = grid_int->name();
     auto grid_ext_name = grid_ext->name();
     auto grid_tmp_name = grid_tmp->name();
     auto field  = get_field_out_wrap(name);
@@ -240,7 +238,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     auto field_tmp = create_helper_field(name_tmp, scalar3d_layout_mid_tmp, grid_tmp_name, ps);
     Field field_int;
     if (m_refine_remap) {
-      field_int = create_helper_field(name, layout, grid_int_name, ps);
+      field_int = create_helper_field(name, scalar3d_layout_mid, grid_int_name, ps);
     } else {
       field_int             = field_tmp.alias(name);
       m_helper_fields[name] = field_int;
@@ -248,7 +246,7 @@ void Nudging::initialize_impl (const RunType /* run_type */)
 
     // Register the fields with the remapper
     m_refine_remapper->register_field(field_tmp, field_int);
-    // Add them to time interpolator
+    // Add the fields to the time interpolator
     m_time_interp.add_field(field_ext.alias(name), true);
   }
   m_time_interp.initialize_data_from_files();
@@ -295,7 +293,6 @@ void Nudging::run_impl (const double dt)
     p_mid_ext_1d   = get_helper_field("p_mid_ext").get_view<mPack*>();
   }
 
-  // Loop over the nudged fields
   for (auto name : m_fields_nudge) {
     auto atm_state_field = get_field_out_wrap(name);      // int horiz, int vert
     auto int_state_field = get_helper_field(name);        // int horiz, int vert
@@ -426,7 +423,7 @@ void Nudging::run_impl (const double dt)
 
   }
 
-  // Refine-remap onto target atmosphere state horiz grid ("int");
+  // Refine-remap onto target atmosphere state horiz grid (int);
   // note that if the nudging data comes from the same grid as the model,
   // this remap step is a no-op; otherwise, we refine-remap from tmp to int
   m_refine_remapper->remap(true);

From 26994c48a5580a99827e00226cbb002cf9e12763 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 17:14:17 -0600
Subject: [PATCH 22/27] check nuding files, mapfile, and remapper

---
 .../eamxx_nudging_process_interface.cpp       | 57 +++++++++++++------
 1 file changed, 40 insertions(+), 17 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 1c6a4bf4de..b5257a5c64 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -17,13 +17,6 @@ Nudging::Nudging (const ekat::Comm& comm, const ekat::ParameterList& params)
   // If we are doing horizontal refine-remapping, we need to get the mapfile from user
   m_refine_remap_file = m_params.get<std::string>(
       "nudging_refine_remap_mapfile", "no-file-given");
-  // If the user gives a mapfile, assume we are refine-remapping,
-  // and we will check later if the file actually does refine-remap 
-  if (m_refine_remap_file != "no-file-given") {
-    m_refine_remap = true;
-  } else {
-    m_refine_remap = false;
-  }
   auto src_pres_type = m_params.get<std::string>("source_pressure_type","TIME_DEPENDENT_3D_PROFILE");
   if (src_pres_type=="TIME_DEPENDENT_3D_PROFILE") {
     m_src_pres_type = TIME_DEPENDENT_3D_PROFILE;
@@ -93,6 +86,46 @@ void Nudging::set_grids(const std::shared_ptr<const GridsManager> grids_manager)
     m_num_src_levs = scorpio::get_dimlen(m_static_vertical_pressure_file,"lev");
     scorpio::eam_pio_closefile(m_static_vertical_pressure_file);
   }
+
+  /* Check for consistency between nudging files, map file, and remapper */
+
+  // Number of columns globally
+  auto m_num_cols_global = m_grid->get_num_global_dofs(); 
+
+  // Get the information from the first nudging data file
+  scorpio::register_file(m_datafiles[0],scorpio::Read);
+  int num_cols_src = scorpio::get_dimlen(m_datafiles[0],"ncol");
+  scorpio::eam_pio_closefile(m_datafiles[0]);
+
+  if (num_cols_src != m_num_cols_global) {
+    // If differing cols, check if remap file is provided
+    EKAT_REQUIRE_MSG(m_refine_remap_file != "no-file-given",
+                     "Error! Nudging::set_grids - the number of columns in the nudging data file "
+                     << std::to_string(num_cols_src) << " does not match the number of columns in the "
+                     << "model grid " << std::to_string(m_num_cols_global) << ".  Please check the "
+                     << "nudging data file and/or the model grid.");
+    // If remap file is provided, check if it is consistent with the nudging data file
+    // First get the data from the mapfile
+    scorpio::register_file(m_refine_remap_file,scorpio::Read);
+    int num_cols_remap_a = scorpio::get_dimlen(m_refine_remap_file,"n_a");
+    int num_cols_remap_b = scorpio::get_dimlen(m_refine_remap_file,"n_b");
+    scorpio::eam_pio_closefile(m_refine_remap_file);
+    // Then, check if n_a (source) and n_b (target) are consistent
+    EKAT_REQUIRE_MSG(num_cols_remap_a == num_cols_src,
+                     "Error! Nudging::set_grids - the number of columns in the nudging data file "
+                     << std::to_string(num_cols_src) << " does not match the number of columns in the "
+                     << "mapfile " << std::to_string(num_cols_remap_a) << ".  Please check the "
+                     << "nudging data file and/or the mapfile.");
+    EKAT_REQUIRE_MSG(num_cols_remap_b == m_num_cols_global,
+                      "Error! Nudging::set_grids - the number of columns in the model grid "
+                      << std::to_string(m_num_cols_global) << " does not match the number of columns in the "
+                      << "mapfile " << std::to_string(num_cols_remap_b) << ".  Please check the "
+                      << "model grid and/or the mapfile.");
+    // If we get here, we are good to go!
+    m_refine_remap = true;
+  } else {
+    m_refine_remap = false;
+  }
 }
 // =========================================================================================
 void Nudging::apply_tendency(Field& base, const Field& next, const Real dt)
@@ -156,16 +189,6 @@ void Nudging::initialize_impl (const RunType /* run_type */)
     // Get grid from remapper, and clone it
     auto grid_ext_const = m_refine_remapper->get_src_grid();
     grid_ext = grid_ext_const->clone(grid_ext_const->name(), true);
-    /* quick check here to ensure we are in good stnading */
-    // If the user gives a mapfile, we assume we are refine-remapping,
-    // but we should check if the mapfile is actually remapping stuff,
-    // so we compare the global columns of the target and source grids
-    auto grid_int_global_cols = grid_int->get_num_global_dofs();
-    auto grid_ext_global_cols = grid_ext->get_num_global_dofs();
-    EKAT_REQUIRE_MSG(
-        grid_int_global_cols != grid_ext_global_cols,
-        "Error! Nudging::initialize_impl - the mapfile given for "
-        "refine-remapping does not remap anything.  Please check the mapfile.");
     // Finally, grid_ext may have different levels
     grid_ext->reset_num_vertical_lev(m_num_src_levs);
   } else {

From ee91955e7f1552a6d0fa22d7aad64929eaf8fc88 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 18:36:03 -0600
Subject: [PATCH 23/27] no need to register/close files

---
 .../physics/nudging/eamxx_nudging_process_interface.cpp   | 8 --------
 1 file changed, 8 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index b5257a5c64..7c3ef6ac96 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -78,13 +78,9 @@ void Nudging::set_grids(const std::shared_ptr<const GridsManager> grids_manager)
 
   //Now need to read in the file
   if (m_src_pres_type == TIME_DEPENDENT_3D_PROFILE) {
-    scorpio::register_file(m_datafiles[0],scorpio::Read);
     m_num_src_levs = scorpio::get_dimlen(m_datafiles[0],"lev");
-    scorpio::eam_pio_closefile(m_datafiles[0]);
   } else {
-    scorpio::register_file(m_static_vertical_pressure_file,scorpio::Read);
     m_num_src_levs = scorpio::get_dimlen(m_static_vertical_pressure_file,"lev");
-    scorpio::eam_pio_closefile(m_static_vertical_pressure_file);
   }
 
   /* Check for consistency between nudging files, map file, and remapper */
@@ -93,9 +89,7 @@ void Nudging::set_grids(const std::shared_ptr<const GridsManager> grids_manager)
   auto m_num_cols_global = m_grid->get_num_global_dofs(); 
 
   // Get the information from the first nudging data file
-  scorpio::register_file(m_datafiles[0],scorpio::Read);
   int num_cols_src = scorpio::get_dimlen(m_datafiles[0],"ncol");
-  scorpio::eam_pio_closefile(m_datafiles[0]);
 
   if (num_cols_src != m_num_cols_global) {
     // If differing cols, check if remap file is provided
@@ -106,10 +100,8 @@ void Nudging::set_grids(const std::shared_ptr<const GridsManager> grids_manager)
                      << "nudging data file and/or the model grid.");
     // If remap file is provided, check if it is consistent with the nudging data file
     // First get the data from the mapfile
-    scorpio::register_file(m_refine_remap_file,scorpio::Read);
     int num_cols_remap_a = scorpio::get_dimlen(m_refine_remap_file,"n_a");
     int num_cols_remap_b = scorpio::get_dimlen(m_refine_remap_file,"n_b");
-    scorpio::eam_pio_closefile(m_refine_remap_file);
     // Then, check if n_a (source) and n_b (target) are consistent
     EKAT_REQUIRE_MSG(num_cols_remap_a == num_cols_src,
                      "Error! Nudging::set_grids - the number of columns in the nudging data file "

From a7be76217aa7209ff4f9877f999f528134e25712 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 18:38:17 -0600
Subject: [PATCH 24/27] add a warning if user provided mapfile, but we are not
 remapping

---
 .../nudging/eamxx_nudging_process_interface.cpp        | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 7c3ef6ac96..10955d6405 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -116,6 +116,16 @@ void Nudging::set_grids(const std::shared_ptr<const GridsManager> grids_manager)
     // If we get here, we are good to go!
     m_refine_remap = true;
   } else {
+    // If the number of columns is the same, we don't need to do any remapping,
+    // but print a warning if the user provided a mapfile
+    if (m_refine_remap_file != "no-file-given") {
+      std::cout << "Warning! Nudging::set_grids - the number of columns in the nudging data file "
+                << std::to_string(num_cols_src) << " matches the number of columns in the "
+                << "model grid " << std::to_string(m_num_cols_global) << ".  The mapfile "
+                << m_refine_remap_file << " will NOT be used.  Please check the "
+                << "nudging data file and/or the model grid." << std::endl;
+    }
+    // Set m_refine_remap to false
     m_refine_remap = false;
   }
 }

From c48e85cabbd7417433b9801389407d30fba78502 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 18:38:49 -0600
Subject: [PATCH 25/27] small adjustment in error message format

---
 .../physics/nudging/eamxx_nudging_process_interface.cpp   | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index 10955d6405..a45efc9913 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -109,10 +109,10 @@ void Nudging::set_grids(const std::shared_ptr<const GridsManager> grids_manager)
                      << "mapfile " << std::to_string(num_cols_remap_a) << ".  Please check the "
                      << "nudging data file and/or the mapfile.");
     EKAT_REQUIRE_MSG(num_cols_remap_b == m_num_cols_global,
-                      "Error! Nudging::set_grids - the number of columns in the model grid "
-                      << std::to_string(m_num_cols_global) << " does not match the number of columns in the "
-                      << "mapfile " << std::to_string(num_cols_remap_b) << ".  Please check the "
-                      << "model grid and/or the mapfile.");
+                     "Error! Nudging::set_grids - the number of columns in the model grid "
+                     << std::to_string(m_num_cols_global) << " does not match the number of columns in the "
+                     << "mapfile " << std::to_string(num_cols_remap_b) << ".  Please check the "
+                    << "model grid and/or the mapfile.");
     // If we get here, we are good to go!
     m_refine_remap = true;
   } else {

From 011891142446b2d32872adb523d661447bff81e3 Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Thu, 30 Nov 2023 18:40:55 -0600
Subject: [PATCH 26/27] fix error msg fmt again

---
 .../src/physics/nudging/eamxx_nudging_process_interface.cpp     | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
index a45efc9913..d03ce878fa 100644
--- a/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
+++ b/components/eamxx/src/physics/nudging/eamxx_nudging_process_interface.cpp
@@ -112,7 +112,7 @@ void Nudging::set_grids(const std::shared_ptr<const GridsManager> grids_manager)
                      "Error! Nudging::set_grids - the number of columns in the model grid "
                      << std::to_string(m_num_cols_global) << " does not match the number of columns in the "
                      << "mapfile " << std::to_string(num_cols_remap_b) << ".  Please check the "
-                    << "model grid and/or the mapfile.");
+                     << "model grid and/or the mapfile.");
     // If we get here, we are good to go!
     m_refine_remap = true;
   } else {

From 506464b32a7b5c71a6b90d1dc76321a27000044b Mon Sep 17 00:00:00 2001
From: mahf708 <naser.mahfouz@pnnl.gov>
Date: Fri, 1 Dec 2023 09:12:25 -0600
Subject: [PATCH 27/27] Add 'Coarse nudging' to docs

---
 components/eamxx/docs/user/coarse_nudging.md | 25 ++++++++++++++++++++
 components/eamxx/mkdocs.yml                  |  1 +
 2 files changed, 26 insertions(+)
 create mode 100644 components/eamxx/docs/user/coarse_nudging.md

diff --git a/components/eamxx/docs/user/coarse_nudging.md b/components/eamxx/docs/user/coarse_nudging.md
new file mode 100644
index 0000000000..7763a40a79
--- /dev/null
+++ b/components/eamxx/docs/user/coarse_nudging.md
@@ -0,0 +1,25 @@
+# Nudging from coarse data
+
+Because EAMxx is designed to run at ultra high resolution, it is not feasible to produce nudging data at the same resolution.
+Instead, in EAMxx, it is possible to nudge from coarse data.
+This is done by remapping the coarse data provided by the user to the runtime physics grid of EAMxx.
+In order to enable nudging from coarse data, the user must provide nudging data at the coarse resolution desired and an appropriate     ncremap-compatible mapping file.
+
+## Example setup
+
+A user can produce coarse nudging data from running EAMxx or EAM at a ne30pg2 or any other applicable resolution.
+Additionally, several users in the E3SM projects have produced nudging data at the ne30pg2 resolution from the MERRA2 and ERA5 datasets.
+A limitation for now is that the nudging data must be provided explicitly, either as one file or as a list of files.
+This can be problematic for long list of files, but we are working on a solution to this problem.
+
+Let's say that the nudging data is provided as one file in the following path: `/path/to/nudging_data_ne4pg2_L72.nc`.
+Then, a mapping file is provided as `/path/to/mapping_file_ne4pg2_to_ne120pg2.nc`.
+Then if the physics grid is ne120pg2, the user must enable the nudging process, specify the nudging files, and provide the specifies the nudging data and a remap file.
+In other words, the following options are needed:
+
+```shell
+./atmchange atm_procs_list=(sc_import,nudging,homme,physics,sc_export)
+./atmchange nudging_fields=U,V
+./atmchange nudging_filename=/path/to/nudging_data_ne4pg2_L72.nc
+./atmchange nudging_refine_remap_mapfile=/path/to/mapping_file_ne4pg2_to_ne120pg2.nc
+```
diff --git a/components/eamxx/mkdocs.yml b/components/eamxx/mkdocs.yml
index d97752bd52..066573d373 100644
--- a/components/eamxx/mkdocs.yml
+++ b/components/eamxx/mkdocs.yml
@@ -8,6 +8,7 @@ nav:
     - 'Model output': 'user/model_output.md'
     - 'Model input': 'user/model_input.md'
     - 'Runtime parameters': 'common/eamxx_params.md'
+    - 'Coarse nudging': 'user/coarse_nudging.md'
   - 'Developer Guide':
     - 'Overview': 'developer/index.md'
     - 'Installation': 'common/installation.md'
